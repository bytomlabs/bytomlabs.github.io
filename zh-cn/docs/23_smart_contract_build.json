{
  "filename": "23_smart_contract_build.md",
  "__html": "<h2>合约交易构造流程</h2>\n<h3>合约参数构造</h3>\n<p>合约参数主要包括两个方面，一个是编译合约<code>contract</code>中的参数，另一个是解锁合约<code>clause</code>中的参数。其中参数的相关注意事项如下：</p>\n<ul>\n<li>调用编译合约API接口<code>compile</code>不加参数是直接编译合约，按照<code>contract</code>中的参数列表顺序加上参数是将合约实例化</li>\n<li>构造解锁合约交易需要添加<code>clause</code>中的参数列表</li>\n<li><code>Signature</code>参数类型只能在<code>clause</code>的参数列表中出现，不允许出现在<code>contract</code>的参数列表中</li>\n<li>如果合约包含多个<code>clause</code>，那么用户只需选择任意一个<code>clause</code>来解锁就可以了。在构造解锁合约的交易过程中，需要添加额外的参数<code>clause_selector</code>（无符号整数类型，小端存储格式），<code>clause_selector</code>是根据合约<code>clause</code>的顺序来指定的，假如<code>clause</code>的个数<code>n</code>，那么选择对应的<code>clause_selector</code>为<code>0 ~ n-1</code>，即第一个<code>clause</code>的<code>clause_selector</code>为<code>0</code>，第二个<code>clause</code>的<code>clause_selector</code>为<code>1</code>，以此类推。</li>\n</ul>\n<p>如果合约的<code>clause</code>参数列表中包含<code>Signature</code>，那么在构造解锁合约交易的时候需要通过签名的必要条件<code>root_xpub</code>和<code>derivation_path</code>来间接获得，因为签名必须通过调用<code>sign-transaction</code>API接口才能得到。参数<code>root_xpub</code>和<code>derivation_path</code>是通过调用<code>list-pubkeys</code>接口获取的，此外<code>Signature</code>一般需要跟<code>PublicKey</code>配套使用，即参数<code>root_xpub</code>和<code>derivation_path</code>需要跟公钥<code>pubkey</code>一一对应，否则合约会执行失败。</p>\n<p>其中<a href=\"https://github.com/Bytom/bytom/wiki/API-Reference#list-pubkeys\">API接口<code>list-pubkeys</code></a>的参数如下：</p>\n<ul>\n<li><code>String</code> - <em>account_id</em>, 账户ID.</li>\n<li><code>String</code> - <em>account_alias</em>, 账户别名.</li>\n<li><code>String</code> - <em>public_key</em>, 根据指定pubkey来查询.</li>\n</ul>\n<p>其请求和响应的json格式如下：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Request</span>\n{\n  <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0G1JIR6400A02\"</span>\n}\n\n<span class=\"hljs-comment\">// Result</span>\n{\n  <span class=\"hljs-string\">\"pubkey_infos\"</span>: [\n    {\n      <span class=\"hljs-string\">\"derivation_path\"</span>: [\n        <span class=\"hljs-string\">\"010100000000000000\"</span>,\n        <span class=\"hljs-string\">\"0300000000000000\"</span>\n      ],\n      <span class=\"hljs-string\">\"pubkey\"</span>: <span class=\"hljs-string\">\"c37d5531f393bc6a3568628c0c0e17801ea452e75d604deb01403c4b161659a3\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"derivation_path\"</span>: [\n        <span class=\"hljs-string\">\"010100000000000000\"</span>,\n        <span class=\"hljs-string\">\"0200000000000000\"</span>\n      ],\n      <span class=\"hljs-string\">\"pubkey\"</span>: <span class=\"hljs-string\">\"117d12e84bb19e956451e0b1eb2bffc662ecb7aac7e63d77e524ddd467eb3617\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"derivation_path\"</span>: [\n        <span class=\"hljs-string\">\"010100000000000000\"</span>,\n        <span class=\"hljs-string\">\"0100000000000000\"</span>\n      ],\n      <span class=\"hljs-string\">\"pubkey\"</span>: <span class=\"hljs-string\">\"e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e78\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"root_xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>\n}\n</code></pre>\n<hr>\n<h3>编译合约</h3>\n<p>编译合约是将合约编译成可执行的虚拟机指令流程。如果合约有参数列表<code>contract parameters</code>的话，在锁定合约之前需要对这些合约参数进行实例化，因为这些参数是解锁合约的限制条件。</p>\n<p>编译合约目前支持两种方式，一种是使用<code>equity</code>编译工具，另一种是调用编译合约的API接口<code>compile</code>。其中通过<a href=\"https://github.com/Bytom/equity\"><code>equity</code>编译工具</a>的方式如下：</p>\n<pre><code>./equity &lt;contract_file&gt; [flags]\n</code></pre>\n<p>其中<code>flag</code>标志如下：</p>\n<pre><code>    --bin        Binary of the contracts in hex.\n    --instance   Object of the Instantiated contracts.\n    --shift      Function shift of the contracts.\n</code></pre>\n<p>以<code>LockWithPublicKey</code>为例，编译并实例化合约如下：</p>\n<pre><code>./equity LockWithPublicKey --instance e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e78\n</code></pre>\n<p>返回结果如下：</p>\n<pre><code>======= LockWithPublicKey =======\nInstantiated program:\n20e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e787403ae7cac00c0\n</code></pre>\n<p>另一种是通过调用编译合约<a href=\"https://github.com/Bytom/bytom/wiki/API-Reference#compile\">API接口<code>compile</code></a>的方式，其接口参数如下：</p>\n<ul>\n<li><code>String</code> - <em>contract</em>, 合约内容.</li>\n<li><code>Array of Object</code> - <em>args</em>, 合约参数结构体（数组类型）.\n<ul>\n<li><code>Boolean</code> - <em>boolean</em>, 布尔类型的合约参数，对应的基本类型是<code>Boolean</code>.</li>\n<li><code>Integer</code> - <em>integer</em>, 整数类型的合约参数，对应的基本类型包括：<code>Integer</code>、<code>Amount</code>.</li>\n<li><code>String</code> - <em>string</em>, 字符串类型的合约参数，对应的基本类型包括：<code>String</code>、<code>Asset</code>、<code>Hash</code>、<code>Program</code>、<code>PublicKey</code>.</li>\n</ul>\n</li>\n</ul>\n<p>以<code>LockWithPublicKey</code>为例，其请求和响应的json格式如下：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Request</span>\n{\n  <span class=\"hljs-string\">\"contract\"</span>: <span class=\"hljs-string\">\"contract LockWithPublicKey(publicKey: PublicKey) locks valueAmount of valueAsset { clause unlockWithSig(sig: Signature) { verify checkTxSig(publicKey, sig) unlock valueAmount of valueAsset }}\"</span>,\n  <span class=\"hljs-string\">\"args\"</span>: [\n    {\n      <span class=\"hljs-string\">\"string\"</span>: <span class=\"hljs-string\">\"e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e78\"</span>\n    }\n  ]\n}\n\n<span class=\"hljs-comment\">// Result</span>\n{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"LockWithPublicKey\"</span>,\n  <span class=\"hljs-string\">\"source\"</span>: <span class=\"hljs-string\">\"contract LockWithPublicKey(publicKey: PublicKey) locks valueAmount of valueAsset { clause unlockWithSig(sig: Signature) { verify checkTxSig(publicKey, sig) unlock valueAmount of valueAsset }}\"</span>,\n  <span class=\"hljs-string\">\"program\"</span>: <span class=\"hljs-string\">\"20e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e787403ae7cac00c0\"</span>,\n  <span class=\"hljs-string\">\"params\"</span>: [\n    {\n      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"publicKey\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"PublicKey\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"locked\"</span>,\n  <span class=\"hljs-string\">\"clause_info\"</span>: [\n    {\n      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"unlockWithSig\"</span>,\n      <span class=\"hljs-string\">\"args\"</span>: [\n        {\n          <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"sig\"</span>,\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Signature\"</span>\n        }\n      ],\n      <span class=\"hljs-string\">\"value_info\"</span>: [\n        {\n          <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"locked\"</span>\n        }\n      ],\n      <span class=\"hljs-string\">\"block_heights\"</span>: [],\n      <span class=\"hljs-string\">\"hash_calls\"</span>: <span class=\"hljs-literal\">null</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"opcodes\"</span>: <span class=\"hljs-string\">\"0xe9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e78 DEPTH 0xae7cac FALSE CHECKPREDICATE\"</span>,\n  <span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-string\">\"\"</span>\n}\n</code></pre>\n<hr>\n<h3>锁定合约</h3>\n<p><code>lock</code>锁定合约，即部署合约，其本质是调用<code>build-transaction</code>接口将资产发送到合约特定的<code>program</code>，只需将接收方<code>control_program</code>设置为指定合约即可，构造锁定合约交易的模板如下：（注意：合约交易暂时不支持接收方资产为BTM资产的交易）</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Request</span>\n{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0G1JIR6400A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">20000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0G1JIR6400A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c22\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c22\"</span>,\n      <span class=\"hljs-string\">\"control_program\"</span>: <span class=\"hljs-string\">\"20e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e787403ae7cac00c0\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_program\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">1521625823</span>\n}\n\n<span class=\"hljs-comment\">// Result</span>\n{\n  <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"0701dfd5c8d505020161015f150ec246dc739a8c4c3f7b4083ededcb2854ca221e437a49f23ec84c7c47ea80ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8099c4d599010001160014726e902e30525e01f0157f12be476c904060383b01000160015ed53c1f3388681f62ae778ac8a54c2b091bbdc91d68ec1e94b20aa2183484f8331e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c2280c8afa02501011600145de3c504b41019d11698d572b1a37d9a4c9118c1010003013effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80bfffcb990101160014310c2265e8e3b7057a62caf09a9f907763f369ea00013d1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c2280f69bf32101160014d0d18752a276c94b25f920b02a8edff251b16b7600014f1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c2280d293ad03012820e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e787403ae7cac00c000\"</span>,\n  <span class=\"hljs-string\">\"signing_instructions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">\"witness_components\"</span>: [\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>,\n          <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">\"keys\"</span>: [\n            {\n              <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>,\n              <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                <span class=\"hljs-string\">\"0100000000000000\"</span>\n              ]\n            }\n          ],\n          <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>\n        },\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n          <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e78\"</span>\n        }\n      ]\n    },\n    {\n      <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"witness_components\"</span>: [\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>,\n          <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">\"keys\"</span>: [\n            {\n              <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>,\n              <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                <span class=\"hljs-string\">\"0700000000000000\"</span>\n              ]\n            }\n          ],\n          <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>\n        },\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n          <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"54df681ac3174a11d4456265641a204e04f64b8f860f37bf5584cf4187f54e99\"</span>\n        }\n      ]\n    }\n  ],\n  <span class=\"hljs-string\">\"allow_additional_actions\"</span>: <span class=\"hljs-literal\">false</span>\n}\n</code></pre>\n<p>构建交易成功之后，便可以对交易进行签名<code>sign-transaction</code>，返回结果中<code>sign_complete</code>为<code>true</code>表示签名成功，将签名的交易通过<code>submit-transaction</code>提交到交易池中，等待交易被打包上链</p>\n<hr>\n<h3>查找合约UTXO</h3>\n<p>部署合约交易发送成功之后，接下来便需要对合约锁定的资产进行解锁，解锁合约之前需要找到合约的UTXO。</p>\n<p>可以通过调用<a href=\"https://github.com/Bytom/bytom/wiki/API-Reference#list-unspent-outputs\">API接口<code>list-unspent-outputs</code></a>来查找，在查合约UTXO的情况下必须将<code>smart_contract</code>设置为<code>true</code>，否则会查不到，其参数如下：</p>\n<ul>\n<li><code>String</code> - <em>id</em>, UTXO对应的<code>outputID</code>，可以根据发布合约交易的输出<code>output</code>中的找到.</li>\n<li><code>Boolean</code> - <em>smart_contract</em>, 是否展示合约的UTXO，默认不显示.</li>\n</ul>\n<p>对应的输入输出结果如下：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Request</span>\ncurl -X POST list-unspent-outputs -d <span class=\"hljs-string\">'{\"id\": \"413d941faf5a19501ab4c06747fe1eb38c5ae76b74d0f5af524fc40ee6bf7116\", \"smart_contract\": true}'</span>\n\n<span class=\"hljs-comment\">// Result</span>\n{\n  <span class=\"hljs-string\">\"account_alias\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"\"</span>,\n  <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n  <span class=\"hljs-string\">\"asset_alias\"</span>: <span class=\"hljs-string\">\"GOLD\"</span>,\n  <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c22\"</span>,\n  <span class=\"hljs-string\">\"change\"</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">\"control_program_index\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"413d941faf5a19501ab4c06747fe1eb38c5ae76b74d0f5af524fc40ee6bf7116\"</span>,\n  <span class=\"hljs-string\">\"program\"</span>: <span class=\"hljs-string\">\"20e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e787403ae7cac00c0\"</span>,\n  <span class=\"hljs-string\">\"source_id\"</span>: <span class=\"hljs-string\">\"c9680e6dd5e9ae7f825fe7edab9fa35c119eb7feab0ab4e426c84a579daf4ef9\"</span>,\n  <span class=\"hljs-string\">\"source_pos\"</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-string\">\"valid_height\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<p>找到对应的合约UTXO之后，可以通过<a href=\"https://github.com/Bytom/bytom/wiki/API-Reference#decode-program\">API接口<code>decode-program</code></a>解析合约的参数信息，用户可以根据已有的参数信息判断该合约能否解锁</p>\n<hr>\n<h3>解锁合约</h3>\n<p><code>unlock</code>解锁合约，即调用合约，其本质是通过给交易添加相应的合约参数以便合约程序<code>program</code>在虚拟机中执行成功，目前合约相关的参数都可以通过<code>build-transaction</code>中的<code>Action</code>结构<code>spend_account_unspent_output</code>中的数组参数<code>arguments</code>进行添加，其中参数如下：</p>\n<p>1） <code>RawTxSigArgument</code> 签名相关的参数，<code>type</code>类型为<code>raw_tx_signature</code>，主要包含主公钥<code>xpub</code>和其对应的派生路径<code>derivation_path</code>，而待验证的<code>publickey</code>是通过该主公钥和派生路径生成的子公钥生成的（这些参数可以通过API接口<code>list-pubkeys</code>获取）</p>\n<ul>\n<li><code>xpub</code> 主公钥</li>\n<li><code>derivation_path</code> 派生路径</li>\n</ul>\n<p>参数格式如下：</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>,\n  <span class=\"hljs-string\">\"raw_data\"</span>: {\n    <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>,\n    <span class=\"hljs-string\">\"derivation_path\"</span>: [\n      <span class=\"hljs-string\">\"010100000000000000\"</span>,\n      <span class=\"hljs-string\">\"0100000000000000\"</span>\n    ]\n  }\n}\n</code></pre>\n<p>2） <code>DataArgument</code> 数据类型参数，<code>type</code>类型为<code>data</code>，该类型可以兼容除了<code>rawTxSigArgument</code>以外的所有合约参数类型，其值是16进制的字符串，需要注意的是<code>integer</code>整数类型是小端存储格式。参数格式如下：（以<code>publickey</code>为例）</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n  <span class=\"hljs-string\">\"raw_data\"</span>: {\n    <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"b3f37834dfa74174e9f0d208302e77c637cfe66c3e37fe1e1574e416b3516e89\"</span>\n  }\n}\n</code></pre>\n<p>3）<code>BoolArgument</code> 布尔类型参数，<code>type</code>类型为<code>boolean</code>，该类型取值为<code>true</code>或<code>false</code>。参数格式如下：</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"boolean\"</span>,\n  <span class=\"hljs-string\">\"raw_data\"</span>: {\n    <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-literal\">true</span>\n  }\n}\n</code></pre>\n<p>4）<code>IntegerArgument</code> 整型类型参数，<code>type</code>类型为<code>integer</code>。参数格式如下：</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"integer\"</span>,\n  <span class=\"hljs-string\">\"raw_data\"</span>: {\n    <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-number\">10000</span>\n  }\n}\n</code></pre>\n<p>5）<code>StrArgument</code> 字符串类型参数，<code>type</code>类型为<code>string</code>。参数格式如下：</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"string\"</span>,\n  <span class=\"hljs-string\">\"raw_data\"</span>: {\n    <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"this is a test string\"</span>\n  }\n}\n</code></pre>\n<p>以合约<code>LockWithPublicKey</code>为例，其解锁合约交易的模板如下：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// Request</span>\n{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account_unspent_output\"</span>,\n      <span class=\"hljs-string\">\"output_id\"</span>: <span class=\"hljs-string\">\"413d941faf5a19501ab4c06747fe1eb38c5ae76b74d0f5af524fc40ee6bf7116\"</span>,\n      <span class=\"hljs-string\">\"arguments\"</span>: [\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>,\n          <span class=\"hljs-string\">\"raw_data\"</span>: {\n            <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>,\n            <span class=\"hljs-string\">\"derivation_path\"</span>: [\n              <span class=\"hljs-string\">\"010100000000000000\"</span>,\n              <span class=\"hljs-string\">\"0100000000000000\"</span>\n            ]\n          }\n        }\n      ]\n    },\n    {\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_program\"</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c22\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n      <span class=\"hljs-string\">\"control_program\"</span>: <span class=\"hljs-string\">\"0014726e902e30525e01f0157f12be476c904060383b\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">5000000</span>,\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0G1JIR6400A02\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">1521625823</span>\n}\n\n<span class=\"hljs-comment\">// Result</span>\n{\n  <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"0701dfd5c8d5050201720170c9680e6dd5e9ae7f825fe7edab9fa35c119eb7feab0ab4e426c84a579daf4ef91e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c2280d293ad0302012820e9108d3ca8049800727f6a3505b3a2710dc579405dde03c250f16d9a7e1e6e787403ae7cac00c001000160015e8412e8e8c359683f1f5f3a7308b084022f1f149dab176e6e6e8daada895d0e29ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0c6c6944f00011600141313e974d19f3d37db29a212d75b4c763e42f433010002013d1e074b22ed7ae8470c7ba5d8a7bc95e83431a753a17465e8673af68a82500c2280d293ad0301160014726e902e30525e01f0157f12be476c904060383b00013dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0b095924f011600147076c737d92621e0033899a54d02fa79f362922700\"</span>,\n  <span class=\"hljs-string\">\"signing_instructions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">\"witness_components\"</span>: [\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>,\n          <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">\"keys\"</span>: [\n            {\n              <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>,\n              <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                <span class=\"hljs-string\">\"0100000000000000\"</span>\n              ]\n            }\n          ],\n          <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>\n        }\n      ]\n    },\n    {\n      <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"witness_components\"</span>: [\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>,\n          <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">\"keys\"</span>: [\n            {\n              <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"5c6145b241b1147987565719657a0506ebb417a2e110a235a42cfb40951880f447432f930ce9fd1a6b7e51b3ddbfdc7adb57d33448f93c0defb4de630703a144\"</span>,\n              <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                <span class=\"hljs-string\">\"0300000000000000\"</span>\n              ]\n            }\n          ],\n          <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>\n        },\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n          <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"c37d5531f393bc6a3568628c0c0e17801ea452e75d604deb01403c4b161659a3\"</span>\n        }\n      ]\n    }\n  ],\n  <span class=\"hljs-string\">\"allow_additional_actions\"</span>: <span class=\"hljs-literal\">false</span>\n}\n</code></pre>\n<p>构建交易成功之后，便可以对交易进行签名<code>sign-transaction</code>，返回结果中<code>sign_complete</code>为<code>true</code>表示签名成功，将签名的交易通过<code>submit-transaction</code>提交到交易池中，等待交易被打包上链</p>\n",
  "link": "/zh-cn/docs/23_smart_contract_build.html",
  "meta": {}
}