{
  "filename": "07_compile_and_run_node.md",
  "__html": "<h2>编译运行比原全节点</h2>\n<h3>构建可执行文件</h3>\n<h4>基础编译</h4>\n<p>切换到比原仓库的根目录.</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/bytom\n$ make bytomd    <span class=\"hljs-comment\"># build bytomd</span>\n$ make bytomcli  <span class=\"hljs-comment\"># build bytomcli</span>\n</code></pre>\n<p>当你成功构建了项目，<code>bytom</code> 和 <code>bytomcli</code> 二进制文件将会在 <code>cmd/bytomd</code> 和 <code>cmd/bytomcli</code> 目录下.</p>\n<h4>其他编译</h4>\n<p><code>make bytomd-simd</code>:</p>\n<ol>\n<li>编译 simd 版 <code>bytomd</code>.</li>\n</ol>\n<p><code>make release</code>:</p>\n<ol>\n<li>编译当前操作系统对应的 <code>32-bit</code>, <code>64-bit</code> 的 <code>bytomd</code>, <code>bytomcli</code> 和 <code>miner</code>.</li>\n<li>进行 md5 校验并压缩打包放在 <code>target/</code> 目录下. Darwin 下需要安装 md5 工具： <code>brew install md5sha1sum</code>.</li>\n</ol>\n<p><code>make release-all</code>:</p>\n<ol>\n<li>编译 <em>Linux</em>, <em>Windows</em> 和 <em>Darwin</em> 对应的 <code>32-bit</code>, <code>64-bit</code> 的 <code>bytomd</code>, <code>bytomcli</code> 和 <code>miner</code>.</li>\n<li>进行 md5 校验并压缩打包放在 <code>target/</code> 目录下. Darwin 下需要安装 md5 工具： <code>brew install md5sha1sum</code>.</li>\n</ol>\n<h3>运行 <code>bytomd</code></h3>\n<h4>初始化</h4>\n<p>首先，初始节点:</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> ./cmd/bytomd\n$ ./bytomd init --chain_id testnet\n</code></pre>\n<p>有两个选项 <code>--chain_id</code>:</p>\n<ul>\n<li><code>testnet</code>: 连接到测试网络.</li>\n<li><code>mainnet</code>: 连接到主网.</li>\n<li><code>solonet</code>: 连接到单机网络</li>\n</ul>\n<p>运行该指令后，你会发现 <code>.bytomd</code> 在当前文件夹生产,然后就可以启动节点了。</p>\n<h4>启动节点</h4>\n<pre><code class=\"language-bash\">$ ./bytomd node --mining\n</code></pre>\n<p>下面是一些可用参数:</p>\n<pre><code>      --auth.disable                Disable rpc access authenticate\n      --mining                      Enable mining\n      --p2p.dial_timeout int        Set dial timeout (default 3)\n      --p2p.handshake_timeout int   Set handshake timeout (default 30)\n      --p2p.laddr string            Node listen address.\n      --p2p.max_num_peers int       Set max num peers (default 50)\n      --p2p.pex                     Enable Peer-Exchange\n      --p2p.seeds string            Comma delimited host:port seed nodes\n      --p2p.skip_upnp               Skip UPNP configuration\n      --prof_laddr string           Use http to profile bytomd programs\n      --wallet.disable              Disable wallet\n      --web.closed                  Lanch web browser or not\n</code></pre>\n<p><code>bytomd</code> 节点运行后,你可以进行以下操作:</p>\n<ul>\n<li>创建密钥,然后你可以创建账户和资产.</li>\n<li>发送交易, 需要构建，签名和提交交易.</li>\n<li>查询所有的信息, 比如可用的密钥，账户，余额和交易等等.</li>\n</ul>\n<h4>测试</h4>\n<p>测试library:</p>\n<pre><code>go test -v ./account \n</code></pre>\n<p>推荐使用选项 <code>-v</code> (没有错误也会记录日志) 。</p>\n<p>只测试一些方法:</p>\n<pre><code>go test -v ./account -run TestCreateAccount\n</code></pre>\n<p><strong>注意</strong>: here all tests with prefix <em>TestMethod</em> will be run, so if you got TestMethod, TestMethod1, then both!</p>\n<p><strong>测试基准</strong>:\n切换到测试目录.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/bytom/<span class=\"hljs-built_in\">test</span>\ngo <span class=\"hljs-built_in\">test</span> -v -bench=. -benchtime=3s -run=none\n</code></pre>\n<p>使用 <code>-bench</code>选项去指定测试目录, 并且使用 <code>-benchtime</code> 来指定测试时间。</p>\n<p>更多请参考 <a href=\"http://golang.org/cmd/go/#hdr-Description_of_testing_flags\">go test flags</a></p>\n",
  "link": "/zh-cn/docs/07_compile_and_run_node.html",
  "meta": {}
}