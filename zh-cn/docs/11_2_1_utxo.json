{
  "filename": "11_2_1_utxo.md",
  "__html": "<h1>UTXO用户自己管理模式</h1>\n<p>该部分主要针对用户自己管理私钥和地址，并通过utxo来构建和发送交易。<br /></p>\n<p><em>注意事项</em>:<br /></p>\n<p>以下步骤以及功能改造仅供参考，具体代码实现需要用户根据实际情况进行调试，具体可以参考单元测试案例代码<a href=\"https://github.com/Bytom/bytom/blob/master/blockchain/txbuilder/txbuilder_test.go#L255\">blockchain/txbuilder/txbuilder_test.go#L255</a></p>\n<p><a name=\"d44d2d25\"></a></p>\n<h2>创建私钥和公钥</h2>\n<p>该部分功能可以参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/crypto/ed25519/chainkd/util.go#L11\">crypto/ed25519/chainkd/util.go#L11</a>，可以通过 <code>NewXKeys(nil)</code> 创建主私钥和主公钥</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewXKeys</span><span class=\"hljs-params\">(r io.Reader)</span> <span class=\"hljs-params\">(xprv XPrv, xpub XPub, err error)</span></span> {\n\txprv, err = NewXPrv(r)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> xprv, xprv.XPub(), <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p><a name=\"ee435325\"></a></p>\n<h2>根据公钥创建接收对象</h2>\n<p>接收对象包含两种形式：<code>address</code>形式和<code>program</code>形式，两者是一一对应的，任选其一即可。其中创建单签地址参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/account/accounts.go#L267\">account/accounts.go#L267</a>进行相应改造为：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Manager)</span> <span class=\"hljs-title\">createP2PKH</span><span class=\"hljs-params\">(xpub chainkd.XPub)</span> <span class=\"hljs-params\">(*CtrlProgram, error)</span></span> {\n\tpubKey := xpub.PublicKey()\n\tpubHash := crypto.Ripemd160(pubKey)\n\n\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> pass different params due to config</span>\n\taddress, err := common.NewAddressWitnessPubKeyHash(pubHash, &amp;consensus.ActiveNetParams)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\tcontrol, err := vmutil.P2WPKHProgram([]<span class=\"hljs-keyword\">byte</span>(pubHash))\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> &amp;CtrlProgram{\n\t\tAddress:        address.EncodeAddress(),\n\t\tControlProgram: control,\n\t}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>创建多签地址参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/account/accounts.go#L294\">account/accounts.go#L294</a>进行相应改造为：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Manager)</span> <span class=\"hljs-title\">createP2SH</span><span class=\"hljs-params\">(xpubs []chainkd.XPub)</span> <span class=\"hljs-params\">(*CtrlProgram, error)</span></span> {\n\tderivedPKs := chainkd.XPubKeys(xpubs)\n\tsignScript, err := vmutil.P2SPMultiSigProgram(derivedPKs, <span class=\"hljs-built_in\">len</span>(derivedPKs))\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\tscriptHash := crypto.Sha256(signScript)\n\n\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> pass different params due to config</span>\n\taddress, err := common.NewAddressWitnessScriptHash(scriptHash, &amp;consensus.ActiveNetParams)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\tcontrol, err := vmutil.P2WSHProgram(scriptHash)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> &amp;CtrlProgram{\n\t\tAddress:        address.EncodeAddress(),\n\t\tControlProgram: control,\n\t}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p><a name=\"ebdc5a6e\"></a></p>\n<h2>找到可花费的utxo</h2>\n<p>找到可花费的utxo，其实就是找到接收地址或接收<code>program</code>是你自己的<code>unspend_output</code>。其中utxo的结构为：（参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/account/reserve.go#L39\">account/reserve.go#L39</a>）</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// UTXO describes an individual account utxo.</span>\n<span class=\"hljs-keyword\">type</span> UTXO <span class=\"hljs-keyword\">struct</span> {\n\tOutputID bc.Hash\n\tSourceID bc.Hash\n\n\t<span class=\"hljs-comment\">// Avoiding AssetAmount here so that new(utxo) doesn't produce an</span>\n\t<span class=\"hljs-comment\">// AssetAmount with a nil AssetId.</span>\n\tAssetID bc.AssetID\n\tAmount  <span class=\"hljs-keyword\">uint64</span>\n\n\tSourcePos      <span class=\"hljs-keyword\">uint64</span>\n\tControlProgram []<span class=\"hljs-keyword\">byte</span>\n\n\tAccountID           <span class=\"hljs-keyword\">string</span>\n\tAddress             <span class=\"hljs-keyword\">string</span>\n\tControlProgramIndex <span class=\"hljs-keyword\">uint64</span>\n\tValidHeight         <span class=\"hljs-keyword\">uint64</span>\n\tChange              <span class=\"hljs-keyword\">bool</span>\n}\n</code></pre>\n<p>涉及utxo构造交易的相关字段说明如下：</p>\n<ul>\n<li><code>SourceID</code> 前一笔关联交易的mux_id, 根据该ID可以定位到前一笔交易的output</li>\n<li><code>AssetID</code> utxo的资产ID</li>\n<li><code>Amount</code> utxo的资产数目</li>\n<li><code>SourcePos</code> 该utxo在前一笔交易的output的位置</li>\n<li><code>ControlProgram</code> utxo的接收program</li>\n<li><code>Address</code> utxo的接收地址</li>\n</ul>\n<p>上述这些utxo的字段信息可以从<code>get-block</code>接口返回结果的transaction中找到，其相关的结构体如下：（参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/api/block_retrieve.go#L26\">api/block_retrieve.go#L26</a>）</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// BlockTx is the tx struct for getBlock func</span>\n<span class=\"hljs-keyword\">type</span> BlockTx <span class=\"hljs-keyword\">struct</span> {\n\tID         bc.Hash                  <span class=\"hljs-string\">`json:\"id\"`</span>\n\tVersion    <span class=\"hljs-keyword\">uint64</span>                   <span class=\"hljs-string\">`json:\"version\"`</span>\n\tSize       <span class=\"hljs-keyword\">uint64</span>                   <span class=\"hljs-string\">`json:\"size\"`</span>\n\tTimeRange  <span class=\"hljs-keyword\">uint64</span>                   <span class=\"hljs-string\">`json:\"time_range\"`</span>\n\tInputs     []*query.AnnotatedInput  <span class=\"hljs-string\">`json:\"inputs\"`</span>\n\tOutputs    []*query.AnnotatedOutput <span class=\"hljs-string\">`json:\"outputs\"`</span>\n\tStatusFail <span class=\"hljs-keyword\">bool</span>                     <span class=\"hljs-string\">`json:\"status_fail\"`</span>\n\tMuxID      bc.Hash                  <span class=\"hljs-string\">`json:\"mux_id\"`</span>\n}\n\n<span class=\"hljs-comment\">//AnnotatedOutput means an annotated transaction output.</span>\n<span class=\"hljs-keyword\">type</span> AnnotatedOutput <span class=\"hljs-keyword\">struct</span> {\n\tType            <span class=\"hljs-keyword\">string</span>             <span class=\"hljs-string\">`json:\"type\"`</span>\n\tOutputID        bc.Hash            <span class=\"hljs-string\">`json:\"id\"`</span>\n\tTransactionID   *bc.Hash           <span class=\"hljs-string\">`json:\"transaction_id,omitempty\"`</span>\n\tPosition        <span class=\"hljs-keyword\">int</span>                <span class=\"hljs-string\">`json:\"position\"`</span>\n\tAssetID         bc.AssetID         <span class=\"hljs-string\">`json:\"asset_id\"`</span>\n\tAssetAlias      <span class=\"hljs-keyword\">string</span>             <span class=\"hljs-string\">`json:\"asset_alias,omitempty\"`</span>\n\tAssetDefinition *json.RawMessage   <span class=\"hljs-string\">`json:\"asset_definition,omitempty\"`</span>\n\tAmount          <span class=\"hljs-keyword\">uint64</span>             <span class=\"hljs-string\">`json:\"amount\"`</span>\n\tAccountID       <span class=\"hljs-keyword\">string</span>             <span class=\"hljs-string\">`json:\"account_id,omitempty\"`</span>\n\tAccountAlias    <span class=\"hljs-keyword\">string</span>             <span class=\"hljs-string\">`json:\"account_alias,omitempty\"`</span>\n\tControlProgram  chainjson.HexBytes <span class=\"hljs-string\">`json:\"control_program\"`</span>\n\tAddress         <span class=\"hljs-keyword\">string</span>             <span class=\"hljs-string\">`json:\"address,omitempty\"`</span>\n}\n</code></pre>\n<p>utxo跟get-block返回结果的字段对应关系如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-string\">`SourceID`</span>       - <span class=\"hljs-string\">`json:\"mux_id\"`</span>\n<span class=\"hljs-string\">`AssetID`</span>        - <span class=\"hljs-string\">`json:\"asset_id\"`</span>\n<span class=\"hljs-string\">`Amount`</span>         - <span class=\"hljs-string\">`json:\"amount\"`</span>\n<span class=\"hljs-string\">`SourcePos`</span>      - <span class=\"hljs-string\">`json:\"position\"`</span>\n<span class=\"hljs-string\">`ControlProgram`</span> - <span class=\"hljs-string\">`json:\"control_program\"`</span>\n<span class=\"hljs-string\">`Address`</span>        - <span class=\"hljs-string\">`json:\"address,omitempty\"`</span>\n</code></pre>\n<p><a name=\"0a47e0b0\"></a></p>\n<h2>通过<code>utxo</code>构造交易</h2>\n<p>通过utxo构造交易就是使用spend_account_unspent_output的方式来花费指定的utxo。</p>\n<p>第一步，通过<code>utxo</code>构造交易输入<code>TxInput</code>和签名需要的数据信息<code>SigningInstruction</code>，该部分功能可以参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/account/builder.go#L169\">account/builder.go#L169</a>进行相应改造为:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// UtxoToInputs convert an utxo to the txinput</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">UtxoToInputs</span><span class=\"hljs-params\">(xpubs []chainkd.XPub, u *UTXO)</span> <span class=\"hljs-params\">(*types.TxInput, *txbuilder.SigningInstruction, error)</span></span> {\n\ttxInput := types.NewSpendInput(<span class=\"hljs-literal\">nil</span>, u.SourceID, u.AssetID, u.Amount, u.SourcePos, u.ControlProgram)\n\tsigInst := &amp;txbuilder.SigningInstruction{}\n\n\t<span class=\"hljs-keyword\">if</span> u.Address == <span class=\"hljs-string\">\"\"</span> {\n\t\t<span class=\"hljs-keyword\">return</span> txInput, sigInst, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\taddress, err := common.DecodeAddress(u.Address, &amp;consensus.ActiveNetParams)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\t<span class=\"hljs-keyword\">switch</span> address.(<span class=\"hljs-keyword\">type</span>) {\n\t<span class=\"hljs-keyword\">case</span> *common.AddressWitnessPubKeyHash:\n\t\tderivedPK := xpubs[<span class=\"hljs-number\">0</span>].PublicKey()\n\t\tsigInst.WitnessComponents = <span class=\"hljs-built_in\">append</span>(sigInst.WitnessComponents, txbuilder.DataWitness([]<span class=\"hljs-keyword\">byte</span>(derivedPK)))\n\n\t<span class=\"hljs-keyword\">case</span> *common.AddressWitnessScriptHash:\n\t\tderivedPKs := chainkd.XPubKeys(xpubs)\n\t\tscript, err := vmutil.P2SPMultiSigProgram(derivedPKs, <span class=\"hljs-built_in\">len</span>(derivedPKs))\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, err\n\t\t}\n\t\tsigInst.WitnessComponents = <span class=\"hljs-built_in\">append</span>(sigInst.WitnessComponents, txbuilder.DataWitness(script))\n\n\t<span class=\"hljs-keyword\">default</span>:\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, errors.New(<span class=\"hljs-string\">\"unsupport address type\"</span>)\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> txInput, sigInst, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>第二步，通过<code>utxo</code>构造交易输出<code>TxOutput</code><br />该部分功能可以参考代码<a href=\"https://github.com/Bytom/bytom/blob/master/protocol/bc/types/txoutput.go#L20\">protocol/bc/types/txoutput.go#L20</a>:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// NewTxOutput create a new output struct</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewTxOutput</span><span class=\"hljs-params\">(assetID bc.AssetID, amount <span class=\"hljs-keyword\">uint64</span>, controlProgram []<span class=\"hljs-keyword\">byte</span>)</span> *<span class=\"hljs-title\">TxOutput</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;TxOutput{\n\t\tAssetVersion: <span class=\"hljs-number\">1</span>,\n\t\tOutputCommitment: OutputCommitment{\n\t\t\tAssetAmount: bc.AssetAmount{\n\t\t\t\tAssetId: &amp;assetID,\n\t\t\t\tAmount:  amount,\n\t\t\t},\n\t\t\tVMVersion:      <span class=\"hljs-number\">1</span>,\n\t\t\tControlProgram: controlProgram,\n\t\t},\n\t}\n}\n</code></pre>\n<p><a name=\"72685efc\"></a></p>\n<h2>组合交易的input和output构成交易模板</h2>\n<p>通过上面已经生成的交易信息构造交易<code>txbuilder.Template</code>，该部分功能可以参考<a href=\"https://github.com/Bytom/bytom/blob/master/blockchain/txbuilder/builder.go#L92\">blockchain/txbuilder/builder.go#L92</a>进行改造为:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> InputAndSigInst <span class=\"hljs-keyword\">struct</span> {\n\tinput *types.TxInput\n\tsigInst *SigningInstruction\n}\n\n<span class=\"hljs-comment\">// Build build transactions with template</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BuildTx</span><span class=\"hljs-params\">(inputs []InputAndSigInst, outputs []*types.TxOutput)</span> <span class=\"hljs-params\">(*Template, *types.TxData, error)</span></span> {\n\ttpl := &amp;Template{}\n\ttx := &amp;types.TxData{}\n\t<span class=\"hljs-comment\">// Add all the built outputs.</span>\n\ttx.Outputs = <span class=\"hljs-built_in\">append</span>(tx.Outputs, outputs...)\n\n\t<span class=\"hljs-comment\">// Add all the built inputs and their corresponding signing instructions.</span>\n\t<span class=\"hljs-keyword\">for</span> _, in := <span class=\"hljs-keyword\">range</span> inputs {\n\t\t<span class=\"hljs-comment\">// Empty signature arrays should be serialized as empty arrays, not null.</span>\n\t\tin.sigInst.Position = <span class=\"hljs-keyword\">uint32</span>(<span class=\"hljs-built_in\">len</span>(inputs))\n\t\t<span class=\"hljs-keyword\">if</span> in.sigInst.WitnessComponents == <span class=\"hljs-literal\">nil</span> {\n\t\t\tin.sigInst.WitnessComponents = []witnessComponent{}\n\t\t}\n\t\ttpl.SigningInstructions = <span class=\"hljs-built_in\">append</span>(tpl.SigningInstructions, in.sigInst)\n\t\ttx.Inputs = <span class=\"hljs-built_in\">append</span>(tx.Inputs, in.input)\n\t}\n\n\ttpl.Transaction = types.NewTx(*tx)\n\t<span class=\"hljs-keyword\">return</span> tpl, tx, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p><a name=\"ee3f2b54\"></a></p>\n<h2>对构造的交易进行签名</h2>\n<p>账户模型是根据密码找到对应的私钥对交易进行签名，这里用户可以直接使用私钥对交易进行签名，可以参考签名代码<a href=\"https://github.com/Bytom/bytom/blob/master/blockchain/txbuilder/txbuilder.go#L82\">blockchain/txbuilder/txbuilder.go#L82</a>进行改造为:（以下改造仅支持单签交易，多签交易用户可以参照该示例进行改造）</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Sign will try to sign all the witness</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Sign</span><span class=\"hljs-params\">(tpl *Template, xprv chainkd.XPrv)</span> <span class=\"hljs-title\">error</span></span> {\n\t<span class=\"hljs-keyword\">for</span> i, sigInst := <span class=\"hljs-keyword\">range</span> tpl.SigningInstructions {\n\t\th := tpl.Hash(<span class=\"hljs-keyword\">uint32</span>(i)).Byte32()\n\t\tsig := xprv.Sign(h[:])\n\t\trawTxSig := &amp;RawTxSigWitness{\n\t\t\tQuorum: <span class=\"hljs-number\">1</span>,\n\t\t\tSigs:   []json.HexBytes{sig},\n\t\t}\n\t\tsigInst.WitnessComponents = <span class=\"hljs-built_in\">append</span>([]witnessComponent(rawTxSig), sigInst.WitnessComponents...)\n\t}\n\t<span class=\"hljs-keyword\">return</span> materializeWitnesses(tpl)\n}\n</code></pre>\n<p><a name=\"0c4670c3\"></a></p>\n<h2>提交交易上链</h2>\n<p>该步骤无需更改任何内容，直接参照wiki中提交交易的API<a href=\"https://github.com/Bytom/bytom/wiki/API-Reference#submit-transaction\">submit-transaction</a>的功能即可</p>\n",
  "link": "/zh-cn/docs/11_2_1_utxo.html",
  "meta": {
    "title": "UTXO用户自己管理模式"
  }
}