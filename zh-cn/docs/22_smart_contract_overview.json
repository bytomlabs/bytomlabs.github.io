{
  "filename": "22_smart_contract_overview.md",
  "__html": "<h2>Equity简介</h2>\n<p>Equity是用于表达合约程序的高级语言，专门用来编写运行在<a href=\"https://github.com/Bytom/bytom\">Bytom</a>上的合约程序，Equity智能合约主要用于描述对<code>Bytom</code>上的各类资产的操作管理。合约的主要特征如下：</p>\n<ul>\n<li><code>Bytom</code>采用<code>BUTXO</code>结构，区块链上记录着由多种不同类型的<code>UTXO</code>构成的账本。每一笔<code>UTXO</code>都有两个重要属性：资产编号<code>assetID</code>和资产数量<code>amount</code>，一般将指定数量<code>amount</code>的资产<code>assetID</code>抽象地指代一笔<code>UTXO</code>。</li>\n<li>比原链上的所有资产都是锁定在合约<code>program</code>中，<code>valueAmount</code>数量的<code>valueAsset</code>资产(即<code>UTXO</code>）一旦被一个合约解锁，仅仅是为了被一个或多个其他合约来进行锁定</li>\n<li>合约保护资产<code>valueAmount of valueAsset</code>的方式是只有用户输入正确的解锁参数才能使合约程序在虚拟机中执行成功</li>\n</ul>\n<p>因此，用<code>Equity</code>语言编写的智能合约，其目的就是 &quot;描述用智能合约锁定哪些资产，以及定义在哪些条件下可以解锁指定的资产&quot;。</p>\n<h3>合约组成</h3>\n<p><code>Equity</code>合约程序是由一个用<code>contract</code>关键字定义的合约结构组成。一个合约的形式为：</p>\n<p><code>contract ContractName ( parameters ) locks valueAmount of valueAsset { clauses }</code></p>\n<ul>\n<li><code>ContractName</code> 合约名，是一个标识符，代表合约的名称，在编写合约时自定义。</li>\n<li><code>parameters</code> 合约参数列表，其类型名必须是合约语言的基本类型</li>\n<li><code>valueAmount</code> 合约锁定的资产数量，即<code>UTXO</code>中的<code>amount</code>，标识符可以自定义</li>\n<li><code>valueAsset</code> 合约锁定的资产类型，即<code>UTXO</code>中的<code>assetID</code>，标识符可以自定义</li>\n<li><code>clauses</code> 条款（即函数）列表，一个合约至少包含一个<code>clause</code></li>\n</ul>\n<h3>条款组成</h3>\n<p>每个<code>clause</code>条款函数描述了一种解锁合约<code>UTXO</code>的方法和解锁所需的参数信息。<code>clause</code>的结构为：</p>\n<p><code>clause ClauseName ( parameters ) { statements }</code></p>\n<ul>\n<li><code>ClauseName</code> 条款名，是一个标识符，代表条款函数的名称，在编写时自定义。</li>\n<li><code>parameters</code> 条款参数列表</li>\n<li><code>statements</code> 合约语句列表，一个<code>clause</code>至少包含一条语句</li>\n</ul>\n<h3>参数列表</h3>\n<p>合约和条款的参数需指明变量名和变量类型。参数定义的格式是：</p>\n<ul>\n<li><code>name : TypeName</code></li>\n</ul>\n<p>参数列表的格式为：</p>\n<ul>\n<li><code>name1 : TypeName1 , name2 : TypeName2 , …</code></li>\n</ul>\n<p>为简洁起见，可以像这样合并相同类型的相邻参数：</p>\n<ul>\n<li><code>name1 , name2 , … : TypeName</code></li>\n</ul>\n<p>所以这两种合约的声明是等价的：</p>\n<ul>\n<li><code>contract LockWithMultiSig(key1: PublicKey, key2: PublicKey, key3: PublicKey)</code></li>\n<li><code>contract LockWithMultiSig(key1, key2, key3: PublicKey)</code></li>\n</ul>\n<p>可用的变量类型有：</p>\n<ul>\n<li><code>Integer</code> <code>Amount</code> <code>Boolean</code> <code>String</code> <code>Hash</code> <code>Asset</code> <code>PublicKey</code> <code>Signature</code> <code>Program</code></li>\n</ul>\n<p>在<a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">数据类型</a>中将会详细介绍这些变量类型。</p>\n<h3>语句组成</h3>\n<p><code>statement</code>合约语句，除了<code>verify</code>、<code>lock</code>和<code>unlock</code>基本语句类型之外，目前还新增加了<code>define</code>、<code>assign</code>和<code>if-else</code>扩展语句类型的支持，语句的格式如下：</p>\n<ul>\n<li>\n<p><code>verify</code> 验证条件语句，用来验证表达式的结果是否为真，模式如下:</p>\n<p> \n<code>verify expression</code></p>\n<p> \n其中<code>expression</code>的结果必须是<code>bool</code>类型，<code>expression</code>表达式的结果必须为<code>true</code>时表示验证成功。示例如下：</p>\n<ul>\n<li><code>verify above(blockNumber)</code> 检测当前块的区块高度是否高于 <code>blockNumber</code>。</li>\n<li><code>verify checkTxSig(key, sig)</code> 检测给定的签名是否与预先设定的公钥相匹配。</li>\n<li><code>verify newBid &gt; currentBid</code> 检测<code>newBid</code>是否大于<code>currentBid</code>。\n </li>\n</ul>\n</li>\n<li>\n<p><code>lock</code> 锁定合约资产语句，模式如下：</p>\n<p> \n<code>lock valueAmount of valueAsset with program</code></p>\n<p> \n其中<code>valueAmount</code>表示资产数量，<code>valueAsset</code>表示资产类型，而<code>program</code>表示接收对象且必须为<code>Program</code>类型。\n </p>\n</li>\n<li>\n<p><code>unlock</code> 解锁合约资产语句，模式如下：</p>\n<p> \n<code>unlock valueAmount of valueAsset</code></p>\n<p> <br>\n其中<code>valueAmount</code>表示资产数量，<code>valueAsset</code>表示资产类型，<code>unlock</code>语句表示解锁的资产可以指定给任意接收对象。\n </p>\n</li>\n<li>\n<p><code>define</code> 自定义变量语句，模式如下：</p>\n<p> \n<code>define identifier : TypeName = expression</code>\n或\n<code>define identifier : TypeName</code></p>\n<p> \n其中<code>identifier</code>表示用户定义了数据类型为<code>TypeName</code>的变量，如果自定义的变量没有赋值，则该变量必须<code>assign</code>语句中赋值。示例如下：</p>\n<ul>\n<li><code>define value : Integer = amount</code> 定义了整型的变量<code>value</code>，并且将<code>amount</code>赋值给该变量。</li>\n<li><code>define value : Integer = amount + shift</code> 定义了整型的变量<code>value</code>，并且将表达式<code>amount + shift</code>的结果赋值给该变量。</li>\n<li><code>define value : Integer</code> 定义了整型的变量<code>value</code>，并没有赋值，该变量需要在<code>assign</code>语句中赋值，否则会报错“变量未赋值”。\n </li>\n</ul>\n</li>\n<li>\n<p><code>assign</code> 自定义变量赋值语句，模式如下</p>\n<p> \n<code>assign identifier = expression</code></p>\n<p> \n其中<code>identifier</code>必须为<code>define</code>语句中用户自定义的变量，禁止修改<code>contract</code>和<code>clause</code>中的变量。示例如下：</p>\n<ul>\n<li><code>assign value = amount</code> 将<code>amount</code>赋值给变量<code>value</code>，并且变量<code>amount</code>和<code>value</code>的数据类型必须相同。\n </li>\n</ul>\n</li>\n<li>\n<p><code>if-else</code> 条件判断语句，模式如下：</p>\n<p> \n<code>if expression { statements }</code>\n或\n<code>if expression { statements } else { statements }</code></p>\n<p> \n其中<code>expression</code>为<code>if-else</code>语句的条件判断表达式，并且该表达式的结果必须是<code>bool</code>类型，当结果为<code>true</code>时执行<code>if</code>下面的<code>statements</code>语句块，否则执行<code>else</code>下面的<code>statements</code>语句块。</p>\n</li>\n</ul>\n<h3>数据类型</h3>\n<p>Equity语言支持的数据类型如下：</p>\n<ul>\n<li><code>Boolean</code> 布尔类型，值为<code>true</code>或<code>false</code>.</li>\n<li><code>Integer</code> 整数类型，取值范围为<code>[-2^63, 2^63-1]</code>.</li>\n<li><code>Amount</code> 无符号整数类型，取值范围为<code>[0, 2^63-1]</code>.</li>\n<li><code>Asset</code> 资产类型，32个字节长度的资产ID.</li>\n<li><code>Hash</code> 哈希类型，32个字节长度的<code>hash</code>值.</li>\n<li><code>PublicKey</code> 公钥类型，32个字节长度的<code>publickey</code>.</li>\n<li><code>Signature</code> 签名类型，该类型需要根据<code>publickey</code>对应的主公钥<code>root_xpub</code>和<code>derivation_path</code>来构造，且只能用于<code>clause</code>的参数列表中.</li>\n<li><code>Program</code> 程序类型，接收<code>program</code>，跟地址是一一对应.</li>\n<li><code>String</code> 字符串类型，16进制字符串.</li>\n</ul>\n<h3>表达式</h3>\n<p><code>Equity</code>表达式可用于上述语句中的<code>expression</code>中，支持的表达式类别如下：</p>\n<ul>\n<li>一元表达式\n<ul>\n<li><code>- expr</code> : 对数学表达式取负值</li>\n<li><code>~ expr</code> : 对字节串做按位翻转\n </li>\n</ul>\n</li>\n<li>条件表达式，下面的表达式都必须为数字类型操作数(即<code>Integer</code>或<code>Amount</code>类型)，并且返回一个 <code>Boolean</code> 型的结果：\n<ul>\n<li><code>expr1 &gt; expr2</code> : 检测<code>expr1</code>是否大于<code>expr2</code></li>\n<li><code>expr1 &lt; expr2</code> : 检测<code>expr1</code>是否小于<code>expr2</code></li>\n<li><code>expr1 &gt;= expr2</code> : 检测<code>expr1</code>是否大于或等于<code>expr2</code></li>\n<li><code>expr1 &lt;= expr2</code> : 检测<code>expr1</code>是否小于或等于<code>expr2</code></li>\n<li><code>expr1 == expr2</code> : 检测<code>expr1</code>是否等于<code>expr2</code></li>\n<li><code>expr1 != expr2</code> : 检测<code>expr1</code>是否不等于<code>expr2</code>\n </li>\n</ul>\n</li>\n<li>按位操作表达式，下面的表达式为字节类型，且返回值也是字节类型：\n<ul>\n<li><code>expr1 ^ expr2</code> : 得到两操作数按位异或(XOR)的结果</li>\n<li><code>expr1 | expr2</code> : 得到两操作数按位或(OR)的结果</li>\n<li><code>expr1 &amp; expr2</code> : 得到两操作数按位与(AND)的结果\n </li>\n</ul>\n</li>\n<li>数值表达式，下面的表达式都是数值型操作数(<code>Integer</code>或<code>Amount</code>)，并且返回数值型的结果：\n<ul>\n<li><code>expr1 + expr2</code> : 两操作数相加</li>\n<li><code>expr1 - expr2</code> : 两操作数相减，<code>expr1</code>减去<code>expr2</code></li>\n<li><code>expr1 * expr2</code> : 两操作数相乘</li>\n<li><code>expr1 / expr2</code> : 两操作数相除，<code>expr1</code>除以<code>expr2</code></li>\n<li><code>expr1 % expr2</code> : 操作数取余，即<code>expr1</code>对<code>expr2</code>取余</li>\n<li><code>expr1 &lt;&lt; expr2</code> : 将<code>expr1</code>按位左移<code>expr2</code>位</li>\n<li><code>expr1 &gt;&gt; expr2</code> : 将<code>expr1</code>按位右移<code>expr2</code>位\n </li>\n</ul>\n</li>\n<li>其他的表达式类型：\n<ul>\n<li><code>( expr )</code> : 表示<code>expr</code>本身</li>\n<li><code>expr ( arguments )</code> : 表示函数调用，传入的参数列表<code>arguments</code>是用逗号分隔的，具体可查阅下面的<a href=\"#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\">内置函数</a></li>\n<li>单独出现的标识符表示变量本身</li>\n<li><code>[ exprs ]</code> : 表示一个列表，其中<code>exprs</code>是以逗号分隔的表达式列表(列表参数目前仅用于<code>checkTxMultiSig</code>中)</li>\n<li>以 <code>-</code> 开头的一串数字序列表示整型数据列表</li>\n<li>单引号 <code>'...'</code> 之间的字节序列表示一个字符串</li>\n<li>前缀 <code>0x</code> 后跟 <code>2n</code> 个十六进制数字，其长度为<code>n</code></li>\n</ul>\n</li>\n</ul>\n<h3>内置函数</h3>\n<p><code>Equity</code>提供了一下内置函数，相关函数如下：</p>\n<ul>\n<li><code>abs(n)</code> 返回数值<code>n</code>的绝对值.</li>\n<li><code>min(x, y)</code> 返回两个数值<code>x</code>和<code>y</code>中最小的一个.</li>\n<li><code>max(x, y)</code> 返回两个数值<code>x</code>和<code>y</code>中最大的一个.</li>\n<li><code>size(s)</code> 返回任意类型的字节大小<code>size</code>.</li>\n<li><code>concat(s1, s2)</code> 返回连接两个字符串<code>s1</code>和<code>s2</code>生成新的字符串.</li>\n<li><code>concatpush(s1, s2)</code> 将两个字符串类型的虚拟机执行操作码<code>s1</code>和<code>s2</code>连接起来(即将<code>s2</code>拼接在<code>s1</code>的后面），然后将他们<code>push</code>到栈中. 该操作函数主要用于嵌套合约中.</li>\n<li><code>below(height)</code> 判断当前区块高度是否低于参数<code>height</code>，如果是则返回<code>true</code>，否则返回<code>false</code>.</li>\n<li><code>above(height)</code> 判断当前区块高度是否高于参数<code>height</code>，如果是则返回<code>true</code>，否则返回<code>false</code>.</li>\n<li><code>sha3(s)</code> 返回字节类型字符串参数<code>s</code>的<code>SHA3-256</code>的哈希运算结果.</li>\n<li><code>sha256(s)</code> 返回字节类型字符串参数<code>s</code>的<code>SHA-256</code>的哈希运算结果.</li>\n<li><code>checkTxSig(key, sig)</code> 根据一个<code>PublicKey</code>和一个<code>Signature</code>验证交易的签名是否正确.</li>\n<li><code>checkTxMultiSig([key1, key2, ...], [sig1, sig2, ...])</code> 根据多个<code>PublicKey</code>和多个<code>Signature</code>验证交易的多重签名是否正确.</li>\n</ul>\n",
  "link": "/zh-cn/docs/22_smart_contract_overview.html",
  "meta": {}
}