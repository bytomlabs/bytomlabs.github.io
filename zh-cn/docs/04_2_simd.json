{
  "filename": "04_2_simd.md",
  "__html": "<h1>Simd</h1>\n<p><a name=\"b6780d84\"></a></p>\n<h2>环境要求</h2>\n<ul>\n<li><a href=\"https://golang.org/doc/install\">Go</a> 版本1.8或者更高, 设置 <code>$GOPATH</code></li>\n</ul>\n<pre><code class=\"language-bash\">$ go version <span class=\"hljs-comment\">#查看golang版本是否符合要求</span>\n$ go env GOROOT GOPATH <span class=\"hljs-comment\">#获取环境变量</span>\n</code></pre>\n<p><a name=\"8331c475\"></a></p>\n<h3>下载Bytom源代码</h3>\n<pre><code class=\"language-bash\">$ git <span class=\"hljs-built_in\">clone</span> https://github.com/Bytom/bytom.git <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/bytom\n</code></pre>\n<p><a name=\"d4ede159\"></a></p>\n<h3>Makefile构建</h3>\n<pre><code class=\"language-bash\">$ make bytom-simd\n</code></pre>\n<p>编译支持Intel <a href=\"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensionsl\">SIMD</a> 技术的Bytom客户端，需注意:</p>\n<ol>\n<li>如果使用_MacOS_llvm_  运行命令:<code>brew install llvm</code>.</li>\n<li>如果使用_Windows_mingw-w64_PATH_环境变量.</li>\n</ol>\n<p><a name=\"4c763bb6\"></a></p>\n<h2>运行</h2>\n<p><a name=\"2cb472ff\"></a></p>\n<h3>初始化</h3>\n<p>首先，初始节点:</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> ./cmd/bytomd\n$ ./bytomd init --chain_id testnet\n</code></pre>\n<p>有两个选项 <code>--chain_id</code>:</p>\n<ul>\n<li><code>testnet</code>: 连接到测试网络.</li>\n<li><code>mainnet</code>: 连接到主网.</li>\n<li><code>solonet</code>: 连接到单机网络<br />运行该指令后，你会发现 <code>.bytomd</code> 在当前文件夹生产,然后就可以启动节点了。</li>\n</ul>\n<p><a name=\"87cdb9e3\"></a></p>\n<h3>启动节点</h3>\n<pre><code class=\"language-bash\">$ ./bytomd node --mining\n</code></pre>\n<p>下面是一些可用参数:</p>\n<pre><code>--auth.disable                Disable rpc access authenticate\n      --mining                      Enable mining\n      --p2p.dial_timeout int        Set dial timeout (default 3)\n      --p2p.handshake_timeout int   Set handshake timeout (default 30)\n      --p2p.laddr string            Node listen address.\n      --p2p.max_num_peers int       Set max num peers (default 50)\n      --p2p.pex                     Enable Peer-Exchange\n      --p2p.seeds string            Comma delimited host:port seed nodes\n      --p2p.skip_upnp               Skip UPNP configuration\n      --prof_laddr string           Use http to profile bytomd programs\n      --wallet.disable              Disable wallet\n      --web.closed                  Lanch web browser or not\n</code></pre>\n<p><code>bytomd</code> 节点运行后,你可以进行以下操作:</p>\n<ul>\n<li>创建密钥,然后你可以创建账户和资产.</li>\n<li>发送交易, 需要构建，签名和提交交易.</li>\n<li>查询所有的信息, 比如可用的密钥，账户，余额和交易等等.</li>\n</ul>\n<p><a name=\"db06c78d\"></a></p>\n<h3>测试</h3>\n<p>测试library:</p>\n<pre><code>go test -v ./account\n</code></pre>\n<p>推荐使用选项 <code>-v</code> (没有错误也会记录日志) 。<br />只测试一些方法:</p>\n<pre><code>go test -v ./account -run TestCreateAccount\n</code></pre>\n<p><strong>注意</strong>: here all tests with prefix <em>TestMethod</em> will be run, so if you got TestMethod, TestMethod1, then both!<br /><strong>测试基准</strong>:<br />切换到测试目录.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/bytom/<span class=\"hljs-built_in\">test</span>\ngo <span class=\"hljs-built_in\">test</span> -v -bench=. -benchtime=3s -run=none\n</code></pre>\n<p>使用 <code>-bench</code>选项去指定测试目录, 并且使用 <code>-benchtime</code> 来指定测试时间。<br />更多请参考 <a href=\"http://golang.org/cmd/go/#hdr-Description_of_testing_flags\">go test flags</a></p>\n",
  "link": "/zh-cn/docs/04_2_simd.html",
  "meta": {
    "title": "Simd"
  }
}