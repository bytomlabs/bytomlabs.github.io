{
  "filename": "11_2_2_account_management.md",
  "__html": "<h1>账户管理模式</h1>\n<p>该部分主要针对用户使用bytom自带的账户模式发送交易<br /></p>\n<p><a name=\"f13cbc7b\"></a></p>\n<h2>构建交易</h2>\n<p>API接口 build-transaction，代码<a href=\"https://github.com/Bytom/bytom/blob/master/api/transact.go#L120\">api/transact.go#L120</a></p>\n<p>以标准的非BTM资产转账交易为例，资产ID为全F表示BTM资产，在该示例中BTM资产仅作为手续费，该交易表示花费99个特定的资产到指定地址中。其中构建交易的输入请求json格式如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">20000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">99</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">99</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f\"</span>,\n      <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_address\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<p>对应源代码的请求对象如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// BuildRequest is main struct when building transactions</span>\n<span class=\"hljs-keyword\">type</span> BuildRequest <span class=\"hljs-keyword\">struct</span> {\n\tTx        *types.TxData            <span class=\"hljs-string\">`json:\"base_transaction\"`</span>\n\tActions   []<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">interface</span>{} <span class=\"hljs-string\">`json:\"actions\"`</span>\n\tTTL       json.Duration            <span class=\"hljs-string\">`json:\"ttl\"`</span>\n\tTimeRange <span class=\"hljs-keyword\">uint64</span>                   <span class=\"hljs-string\">`json:\"time_range\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Tx</code> 交易的<code>TxData</code>部分，该字段为预留字段，为空即可</li>\n<li><code>TTL</code> 构建交易的生存时间（单位为毫秒），意味着在该时间范围内，已经缓存的utxo不能用于再一次build交易，除非剩余的utxo足以构建一笔新的交易，否则会报错。当<code>ttl</code>为0时会被默认设置为600s，即5分钟</li>\n<li><code>TimeRange</code> 时间戳，意味着该交易将在该时间戳（区块高度）之后不会被提交上链，为了防止交易在网络中传输延迟而等待太久时间，如果交易没有在特定的时间范围内被打包，该交易便会自动失效</li>\n<li><code>Actions</code> 交易的<code>actions</code>结构，所有的交易都是由action构成的，<code>map</code>类型的<code>interface{}</code>保证了action类型的可扩展性。其中action中必须包含type字段，用于区分不同的action类型，<code>action</code>主要包含<code>input</code>和<code>output</code>两种类型，其详细介绍如下：\n<ul>\n<li><code>input action</code> 类型：\n<ul>\n<li>issue 发行资产</li>\n<li>spend_account 以账户的模式花费utxo</li>\n<li>spend_account_unspent_output 直接花费指定的utxo</li>\n</ul>\n</li>\n<li><code>output action</code> 类型：\n<ul>\n<li>control_address 接收方式为地址模式</li>\n<li>control_program 接收方式为（program）合约模式</li>\n<li>retire 销毁资产</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><em>注意事项</em>：</p>\n<ul>\n<li>一个交易必须至少包含一个input和output（coinbase交易除外，因为coinbase交易是由系统产生，故不在此加以描述），否则交易将会报错。</li>\n<li>除了BTM资产（所有交易都是以BTM资产作为手续费）之外，其他资产在构建input和output时，所有输入和输出的资产总和必须相等，否则交易会报出输入输出不平衡的错误信息。</li>\n<li>交易的手续费： 所有inputs的BTM资产数量 - 所有outputs的BTM资产数量</li>\n<li>交易中的资产amount都是neu为单位的，BTM的单位换算如下：1 BTM = 1000 mBTM = 100000000 neu</li>\n</ul>\n<p><a name=\"f445051d\"></a></p>\n<h3>action简介</h3>\n<p>下面对构建交易时用到的各种<code>action</code>类型进行详细说明：</p>\n<p><a name=\"issue\"></a></p>\n<h4>issue</h4>\n<p><code>issueAction</code>结构体源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> issueAction <span class=\"hljs-keyword\">struct</span> {\n\tassets *Registry\n\tbc.AssetAmount\n}\n\n<span class=\"hljs-keyword\">type</span> AssetAmount <span class=\"hljs-keyword\">struct</span> {\n\tAssetId *AssetID <span class=\"hljs-string\">`protobuf:\"bytes,1,opt,name=asset_id,json=assetId\" json:\"asset_id,omitempty\"`</span>\n\tAmount  <span class=\"hljs-keyword\">uint64</span>   <span class=\"hljs-string\">`protobuf:\"varint,2,opt,name=amount\" json:\"amount,omitempty\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>assets</code> 主要用于资产的管理，无需用户设置参数</li>\n<li><code>AssetAmount</code> 表示用户需要发行的资产ID和对应的资产数目，这里的<code>AssetID</code>需要通过<code>create-asset</code>创建，并且这里不能使用<code>BTM</code>的资产ID</li>\n</ul>\n<p><code>issueAction</code>的<code>json</code>格式为：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n  <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"3152a15da72be51b330e1c0f8e1c0db669269809da4f16443ff266e07cc43680\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"issue\"</span>\n}\n</code></pre>\n<p>例如发行一笔资产的交易示例如下：<br />（该交易表示发行数量为<code>900000000</code>个<code>assetID</code>的<code>42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f</code>的资产到接收地址<code>sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me</code>中, 其中手续费为<code>20000000</code>neu的BTM资产）</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">20000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"issue\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f\"</span>,\n      <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_address\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<hr>\n<p><a name=\"spend_account\"></a></p>\n<h4>spend_account</h4>\n<p><code>spendAction</code>结构体源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> spendAction <span class=\"hljs-keyword\">struct</span> {\n\taccounts *Manager\n\tbc.AssetAmount\n\tAccountID   <span class=\"hljs-keyword\">string</span>  <span class=\"hljs-string\">`json:\"account_id\"`</span>\n\tClientToken *<span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"client_token\"`</span>\n}\n\n<span class=\"hljs-keyword\">type</span> AssetAmount <span class=\"hljs-keyword\">struct</span> {\n\tAssetId *AssetID <span class=\"hljs-string\">`protobuf:\"bytes,1,opt,name=asset_id,json=assetId\" json:\"asset_id,omitempty\"`</span>\n\tAmount  <span class=\"hljs-keyword\">uint64</span>   <span class=\"hljs-string\">`protobuf:\"varint,2,opt,name=amount\" json:\"amount,omitempty\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>accounts</code> 主要用于账户的管理，无需用户设置参数</li>\n<li><code>AccountID</code> 表示需要花费资产的账户ID</li>\n<li><code>AssetAmount</code> 表示花费的资产ID和对应的资产数目</li>\n<li><code>ClientToken</code> 表示Reserve用户UTXO的限制条件，目前不填或为空即可</li>\n</ul>\n<p><code>spendAction</code>的<code>json</code>格式为：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0BF63M2U00A04\"</span>,\n  <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">2000000000</span>,\n  <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n}\n</code></pre>\n<p>例如转账一笔资产的交易示例如下：<br />（该交易表示通过账户的方式转账<code>100000000</code>neu的BTM资产到地址<code>sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me</code>中, 其中手续费<code>20000000</code>neu = 输入BTM资产数量 - 输出BTM资产数量）</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">120000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_address\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<hr>\n<p><a name=\"spend_account_unspent_output\"></a></p>\n<h4>spend_account_unspent_output</h4>\n<p><code>spendUTXOAction</code>结构体源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> spendUTXOAction <span class=\"hljs-keyword\">struct</span> {\n\taccounts *Manager\n\tOutputID *bc.Hash <span class=\"hljs-string\">`json:\"output_id\"`</span>\n\tClientToken *<span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"client_token\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>accounts</code> 主要用于账户的管理，无需用户设置参数</li>\n<li><code>OutputID</code> 表示需要花费的UTXO的ID，可以根据<code>list-unspent-outputs</code>查询可用的UTXO，其中<code>OutputID</code>对应该API返回结果的<code>id</code>字段</li>\n<li><code>ClientToken</code> 表示Reserve用户UTXO的限制条件，目前不填或为空即可</li>\n</ul>\n<p><code>spendUTXOAction</code>的<code>json</code>格式为：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account_unspent_output\"</span>,\n  <span class=\"hljs-string\">\"output_id\"</span>: <span class=\"hljs-string\">\"58f29f0f85f7bd2a91088bcbe536dee41cd0642dfb1480d3a88589bdbfd642d9\"</span>\n}\n</code></pre>\n<p>例如通过花费UTXO的方式转账一笔资产的交易示例如下：<br />（该交易表示通过直接花费UTXO的方式转账<code>100000000</code>neu的BTM资产到地址<code>sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me</code>中, 其中手续费 = 输入BTM资产的UTXO值 - 输出BTM资产数量）</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"output_id\"</span>: <span class=\"hljs-string\">\"58f29f0f85f7bd2a91088bcbe536dee41cd0642dfb1480d3a88589bdbfd642d9\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account_unspent_output\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_address\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<hr>\n<p><a name=\"control_address\"></a></p>\n<h4>control_address</h4>\n<p><code>controlAddressAction</code>结构体源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> controlAddressAction <span class=\"hljs-keyword\">struct</span> {\n\tbc.AssetAmount\n\tAddress <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"address\"`</span>\n}\n\n<span class=\"hljs-keyword\">type</span> AssetAmount <span class=\"hljs-keyword\">struct</span> {\n\tAssetId *AssetID <span class=\"hljs-string\">`protobuf:\"bytes,1,opt,name=asset_id,json=assetId\" json:\"asset_id,omitempty\"`</span>\n\tAmount  <span class=\"hljs-keyword\">uint64</span>   <span class=\"hljs-string\">`protobuf:\"varint,2,opt,name=amount\" json:\"amount,omitempty\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Address</code> 表示接收资产的地址，可以根据 <code>create-account-receiver</code> API接口创建地址</li>\n<li><code>AssetAmount</code> 表示接收的资产ID和对应的资产数目</li>\n</ul>\n<p><code>controlAddressAction</code>的<code>json</code>格式为：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n  <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n  <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"bm1q50u3z8empm5ke0g3ngl2t3sqtr6sd7cepd3z68\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_address\"</span>\n}\n</code></pre>\n<p>例如转账一笔资产的交易示例如下：<br />（该交易表示通过账户的方式转账<code>100000000</code>neu的BTM资产到地址<code>sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me</code>中, 其中<code>control_address</code>类型表示以地址作为接收方式）</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">120000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"sm1qxe4jwhkekgnxkezu7xutu5gqnnpmyc8ppq98me\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_address\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<hr>\n<p><a name=\"control_program\"></a></p>\n<h4>control_program</h4>\n<p><code>controlProgramAction</code>结构体源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> controlProgramAction <span class=\"hljs-keyword\">struct</span> {\n\tbc.AssetAmount\n\tProgram json.HexBytes <span class=\"hljs-string\">`json:\"control_program\"`</span>\n}\n\n<span class=\"hljs-keyword\">type</span> AssetAmount <span class=\"hljs-keyword\">struct</span> {\n\tAssetId *AssetID <span class=\"hljs-string\">`protobuf:\"bytes,1,opt,name=asset_id,json=assetId\" json:\"asset_id,omitempty\"`</span>\n\tAmount  <span class=\"hljs-keyword\">uint64</span>   <span class=\"hljs-string\">`protobuf:\"varint,2,opt,name=amount\" json:\"amount,omitempty\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Program</code> 表示接收资产的合约脚本，可以根据 <code>create-account-receiver</code> API接口创建接收<code>program</code>（返回结果的 <code>program</code> 和 <code>address</code> 是一一对应的）</li>\n<li><code>AssetAmount</code> 表示接收的资产ID和对应的资产数目</li>\n</ul>\n<p><code>controlProgramAction</code>的<code>json</code>格式为：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n  <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n  <span class=\"hljs-string\">\"control_program\"</span>:<span class=\"hljs-string\">\"0014a3f9111f3b0ee96cbd119a3ea5c60058f506fb19\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_program\"</span>\n}\n</code></pre>\n<p>例如转账一笔资产的交易示例如下：<br />（该交易表示通过账户的方式转账<code>100000000</code>neu的BTM资产到接收<code>program</code>（跟<code>address</code>是一一对应的）<code>0014a3f9111f3b0ee96cbd119a3ea5c60058f506fb19</code>中, 其中<code>control_program</code>类型表示以<code>program</code>作为接收方式）</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">120000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"control_program\"</span>: <span class=\"hljs-string\">\"0014a3f9111f3b0ee96cbd119a3ea5c60058f506fb19\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"control_program\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<hr>\n<p><a name=\"retire\"></a></p>\n<h4>retire</h4>\n<p><code>retireAction</code>结构体源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> retireAction <span class=\"hljs-keyword\">struct</span> {\n\tbc.AssetAmount\n}\n\n<span class=\"hljs-keyword\">type</span> AssetAmount <span class=\"hljs-keyword\">struct</span> {\n\tAssetId *AssetID <span class=\"hljs-string\">`protobuf:\"bytes,1,opt,name=asset_id,json=assetId\" json:\"asset_id,omitempty\"`</span>\n\tAmount  <span class=\"hljs-keyword\">uint64</span>   <span class=\"hljs-string\">`protobuf:\"varint,2,opt,name=amount\" json:\"amount,omitempty\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>AssetAmount</code> 表示销毁的资产ID和对应的资产数目</li>\n</ul>\n<p><code>retireAction</code>的<code>json</code>格式为：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">900000000</span>,\n  <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"3152a15da72be51b330e1c0f8e1c0db669269809da4f16443ff266e07cc43680\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"retire\"</span>\n}\n</code></pre>\n<p>例如销毁一笔资产的交易示例如下：<br />（该交易表示通过账户的方式将<code>100000000</code>neu的BTM资产销毁, <code>retire</code>表示销毁指定数量的资产）</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"base_transaction\"</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">\"actions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"account_id\"</span>: <span class=\"hljs-string\">\"0ER7MEFGG0A02\"</span>,\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">120000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"spend_account\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"amount\"</span>: <span class=\"hljs-number\">100000000</span>,\n      <span class=\"hljs-string\">\"asset_id\"</span>: <span class=\"hljs-string\">\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"</span>,\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"retire\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"ttl\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">\"time_range\"</span>: <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<hr>\n<p><code>build-transaction</code>的输入构造完成之后，便可以通过http的调用方式进行发送交易，构建交易请求成功之后返回的json结果如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"allow_additional_actions\"</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"070100020161015f1190c60818b4aff485c865113c802942f29ce09088cae1b117fc4c8db2292212ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8099c4d599010001160014a86c83ee12e6d790fb388345cc2e2b87056a077301000161015fb018097c4040c8dd86d95611a13c24f90d4c9d9d06b25f5c9ed0556ac8abd73442275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f80a094a58d1d0101160014068840e56af74038571f223b1c99f1b60caaf456010003013effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80bfffcb9901011600140b946646626c55a52a325c8bb48de792284d9b7200013e42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f9d9f94a58d1d01160014c8b4391bab4923a83b955170d24ee4ca5b6ec3fb00013942275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f6301160014366b275ed9b2266b645cf1b8be51009cc3b260e100\"</span>,\n  <span class=\"hljs-string\">\"signing_instructions\"</span>: [\n    {\n      <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">\"witness_components\"</span>: [\n        {\n          <span class=\"hljs-string\">\"keys\"</span>: [\n            {\n              <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                <span class=\"hljs-string\">\"0100000000000000\"</span>\n              ],\n              <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n            }\n          ],\n          <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>,\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n        },\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n          <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"d174db6506e35f2decb5be148c2984bfd0f6c67f043365bf642d1af387c04fd5\"</span>\n        }\n      ]\n    },\n    {\n      <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">\"witness_components\"</span>: [\n        {\n          <span class=\"hljs-string\">\"keys\"</span>: [\n            {\n              <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                <span class=\"hljs-string\">\"0800000000000000\"</span>\n              ],\n              <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n            }\n          ],\n          <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>,\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n        },\n        {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n          <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"05cdbcc705f07ad87521835bbba226ad7b430cc24e5e3f008edbe61540535419\"</span>\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n<p>对应响应对象的源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Template represents a partially- or fully-signed transaction.</span>\n<span class=\"hljs-keyword\">type</span> Template <span class=\"hljs-keyword\">struct</span> {\n\tTransaction         *types.Tx             <span class=\"hljs-string\">`json:\"raw_transaction\"`</span>\n\tSigningInstructions []*SigningInstruction <span class=\"hljs-string\">`json:\"signing_instructions\"`</span>\n\n\t<span class=\"hljs-comment\">// AllowAdditional affects whether Sign commits to the tx sighash or</span>\n\t<span class=\"hljs-comment\">// to individual details of the tx so far. When true, signatures</span>\n\t<span class=\"hljs-comment\">// commit to tx details, and new details may be added but existing</span>\n\t<span class=\"hljs-comment\">// ones cannot be changed. When false, signatures commit to the tx</span>\n\t<span class=\"hljs-comment\">// as a whole, and any change to the tx invalidates the signature.</span>\n\tAllowAdditional <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-string\">`json:\"allow_additional_actions\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Transaction</code> 交易相关信息，该字段包含<code>TxData</code>和<code>bc.Tx</code>两个部分：\n<ul>\n<li><code>TxData</code> 表示给用户展示的交易数据部分，该部分对用户可见\n<ul>\n<li><code>Version</code> 交易版本</li>\n<li><code>SerializedSize</code> 交易序列化之后的size</li>\n<li><code>TimeRange</code> 交易提交上链的最大时间戳（区块高度）（主链区块高度到达该时间戳（区块高度）之后，如果交易没有被提交上链，该交易便会失效）</li>\n<li><code>Inputs</code> 交易输入</li>\n<li><code>Outputs</code> 交易输出</li>\n</ul>\n</li>\n<li><code>bc.Tx</code> 表示系统中处理交易用到的转换结构，该部分对用户不可见，故不做详细描述</li>\n</ul>\n</li>\n<li><code>SigningInstructions</code> 交易的签名信息\n<ul>\n<li><code>Position</code> 对<code>input action</code>签名的位置</li>\n<li><code>WitnessComponents</code> 对<code>input action</code>签名需要的数据信息，其中build交易的<code>signatures</code>为<code>null</code>，表示没有签名; 如果交易签名成功，则该字段会存在签名信息。该字段是一个interface接口，主要包含3种不同的类型：\n<ul>\n<li><code>SignatureWitness</code> 对交易模板<code>Template</code>中交易<code>input action</code>位置的合约program进行哈希，然后对hash值进行签名\n<ul>\n<li><code>signatures</code> （数组类型）交易的签名，<code>sign-transaction</code>执行完成之后才会有值存在</li>\n<li><code>keys</code> （数组类型）包含主公钥<code>xpub</code>和派生路径<code>derivation_path</code>，通过它们可以在签名阶段找到对应的派生私钥<code>child_xprv</code>，然后使用派生私钥进行签名</li>\n<li><code>quorum</code> 账户<code>key</code> 的个数，必须和上面的<code>keys</code>的长度相等。如果<code>quorum</code> 等于1，则表示单签账户，否则为多签账户</li>\n<li><code>program</code> 签名的数据部分，<code>program</code>的hash值作为签名数据。如果<code>program</code>为空，则会根据当前交易ID和对应action位置的InputID两部分生成一个hash，然后把它们作为指令数据自动构造一个<code>program</code></li>\n</ul>\n</li>\n<li><code>RawTxSigWitness</code> 对交易模板<code>Template</code>的交易ID和对应<code>input action</code>位置的InputID(该字段位于bc.Tx中)进行哈希，然后对hash值进行签名\n<ul>\n<li><code>signatures</code> （数组类型）交易的签名，<code>sign-transaction</code>执行完成之后才会有值存在</li>\n<li><code>keys</code> （数组类型）包含主公钥<code>xpub</code>和派生路径<code>derivation_path</code>，通过它们可以在签名阶段找到对应的派生私钥<code>child_xprv</code>，然后使用派生私钥进行签名</li>\n<li><code>quorum</code> 账户<code>key</code>的个数，必须和上面的<code>keys</code> 的长度相等。如果<code>quorum</code> 等于1，则表示单签账户，否则为多签账户</li>\n</ul>\n</li>\n<li><code>DataWitness</code> 该类型无需签名，验证合约program的附加数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>AllowAdditional</code> 是否允许交易的附加数据，如果为<code>true</code>，则交易的附加数据会添加到交易中，但是不会影响交易的执行的<code>program</code>脚本，对签名结果不会造成影响; 如果为<code>false</code>，则整个交易作为一个整体进行签名，任何数据的改变将影响整个交易的签名</li>\n</ul>\n<p><a name=\"3b2118bc\"></a></p>\n<h2>估算手续费</h2>\n<p>估算手续费接口<code>estimate-transaction-gas</code>是对<code>build-transaction</code>的结果进行手续费的预估，估算的结果需要重新加到<code>build-transaction</code>的结果中，然后对交易进行签名和提交。其主要流程如下：</p>\n<pre><code>build - estimate - build - sign - submit\n</code></pre>\n<p>估算手续费的输入请求json格式如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"transaction_template\"</span>: {\n    <span class=\"hljs-string\">\"allow_additional_actions\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"070100020161015f1190c60818b4aff485c865113c802942f29ce09088cae1b117fc4c8db2292212ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8099c4d599010001160014a86c83ee12e6d790fb388345cc2e2b87056a077301000161015fb018097c4040c8dd86d95611a13c24f90d4c9d9d06b25f5c9ed0556ac8abd73442275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f80a094a58d1d0101160014068840e56af74038571f223b1c99f1b60caaf456010003013effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80bfffcb9901011600140b946646626c55a52a325c8bb48de792284d9b7200013e42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f9d9f94a58d1d01160014c8b4391bab4923a83b955170d24ee4ca5b6ec3fb00013942275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f6301160014366b275ed9b2266b645cf1b8be51009cc3b260e100\"</span>,\n    <span class=\"hljs-string\">\"signing_instructions\"</span>: [\n      {\n        <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-string\">\"witness_components\"</span>: [\n          {\n            <span class=\"hljs-string\">\"keys\"</span>: [\n              {\n                <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                  <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                  <span class=\"hljs-string\">\"0100000000000000\"</span>\n                ],\n                <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n              }\n            ],\n            <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n          },\n          {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"d174db6506e35f2decb5be148c2984bfd0f6c67f043365bf642d1af387c04fd5\"</span>\n          }\n        ]\n      },\n      {\n        <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">\"witness_components\"</span>: [\n          {\n            <span class=\"hljs-string\">\"keys\"</span>: [\n              {\n                <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                  <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                  <span class=\"hljs-string\">\"0800000000000000\"</span>\n                ],\n                <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n              }\n            ],\n            <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n          },\n          {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"05cdbcc705f07ad87521835bbba226ad7b430cc24e5e3f008edbe61540535419\"</span>\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n<p>对应响应对象的源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> request <span class=\"hljs-keyword\">struct</span>{\n\tTxTemplate txbuilder.Template <span class=\"hljs-string\">`json:\"transaction_template\"`</span>\n}\n\n<span class=\"hljs-comment\">// Template represents a partially- or fully-signed transaction.</span>\n<span class=\"hljs-keyword\">type</span> Template <span class=\"hljs-keyword\">struct</span> {\n\tTransaction         *types.Tx             <span class=\"hljs-string\">`json:\"raw_transaction\"`</span>\n\tSigningInstructions []*SigningInstruction <span class=\"hljs-string\">`json:\"signing_instructions\"`</span>\n\n\t<span class=\"hljs-comment\">// AllowAdditional affects whether Sign commits to the tx sighash or</span>\n\t<span class=\"hljs-comment\">// to individual details of the tx so far. When true, signatures</span>\n\t<span class=\"hljs-comment\">// commit to tx details, and new details may be added but existing</span>\n\t<span class=\"hljs-comment\">// ones cannot be changed. When false, signatures commit to the tx</span>\n\t<span class=\"hljs-comment\">// as a whole, and any change to the tx invalidates the signature.</span>\n\tAllowAdditional <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-string\">`json:\"allow_additional_actions\"`</span>\n}\n</code></pre>\n<p>其中<code>TxTemplate</code>相关字段的说明见build-transaction的结果描述</p>\n<p>调用<code>estimate-transaction-gas</code>接口成功之后返回的json结果如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"total_neu\"</span>: <span class=\"hljs-number\">5000000</span>,\n  <span class=\"hljs-string\">\"storage_neu\"</span>: <span class=\"hljs-number\">3840000</span>,\n  <span class=\"hljs-string\">\"vm_neu\"</span>: <span class=\"hljs-number\">1419000</span>\n}\n</code></pre>\n<p>对应响应对象的源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// EstimateTxGasResp estimate transaction consumed gas</span>\n<span class=\"hljs-keyword\">type</span> EstimateTxGasResp <span class=\"hljs-keyword\">struct</span> {\n\tTotalNeu   <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"total_neu\"`</span>\n\tStorageNeu <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"storage_neu\"`</span>\n\tVMNeu      <span class=\"hljs-keyword\">int64</span> <span class=\"hljs-string\">`json:\"vm_neu\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>TotalNeu</code> 预估的总手续费（单位为neu），该值直接加到build-transaction的BTM资产输入action中即可</li>\n<li><code>StorageNeu</code> 存储交易的手续费</li>\n<li><code>VMNeu</code> 运行虚拟机的手续费</li>\n</ul>\n<p><a name=\"d76875ef\"></a></p>\n<h2>签名交易</h2>\n<p>API接口 sign-transaction，代码<a href=\"https://github.com/Bytom/bytom/blob/master/api/hsm.go#L53\">api/hsm.go#L53</a></p>\n<p>签名交易的输入请求json格式如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"123456\"</span>,\n  <span class=\"hljs-string\">\"transaction\"</span>: {\n    <span class=\"hljs-string\">\"allow_additional_actions\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"070100020161015f1190c60818b4aff485c865113c802942f29ce09088cae1b117fc4c8db2292212ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8099c4d599010001160014a86c83ee12e6d790fb388345cc2e2b87056a077301000161015fb018097c4040c8dd86d95611a13c24f90d4c9d9d06b25f5c9ed0556ac8abd73442275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f80a094a58d1d0101160014068840e56af74038571f223b1c99f1b60caaf456010003013effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80bfffcb9901011600140b946646626c55a52a325c8bb48de792284d9b7200013e42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f9d9f94a58d1d01160014c8b4391bab4923a83b955170d24ee4ca5b6ec3fb00013942275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f6301160014366b275ed9b2266b645cf1b8be51009cc3b260e100\"</span>,\n    <span class=\"hljs-string\">\"signing_instructions\"</span>: [\n      {\n        <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-string\">\"witness_components\"</span>: [\n          {\n            <span class=\"hljs-string\">\"keys\"</span>: [\n              {\n                <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                  <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                  <span class=\"hljs-string\">\"0100000000000000\"</span>\n                ],\n                <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n              }\n            ],\n            <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n          },\n          {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"d174db6506e35f2decb5be148c2984bfd0f6c67f043365bf642d1af387c04fd5\"</span>\n          }\n        ]\n      },\n      {\n        <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">\"witness_components\"</span>: [\n          {\n            <span class=\"hljs-string\">\"keys\"</span>: [\n              {\n                <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                  <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                  <span class=\"hljs-string\">\"0800000000000000\"</span>\n                ],\n                <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n              }\n            ],\n            <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"signatures\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n          },\n          {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"05cdbcc705f07ad87521835bbba226ad7b430cc24e5e3f008edbe61540535419\"</span>\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n<p>对应请求对象的源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> SignRequest <span class=\"hljs-keyword\">struct</span> {    <span class=\"hljs-comment\">//function pseudohsmSignTemplates request</span>\n\tPassword <span class=\"hljs-keyword\">string</span>             <span class=\"hljs-string\">`json:\"password\"`</span>\n\tTxs      txbuilder.Template <span class=\"hljs-string\">`json:\"transaction\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Password</code> 签名的密码，根据密码可以从节点服务器上解析出用户的私钥，然后用私钥对交易进行签名</li>\n<li><code>Txs</code> 交易模板，build-transaction的返回结果，结构类型为 <code>txbuilder.Template</code>，相关字段的说明见build-transaction的结果描述</li>\n</ul>\n<p>签名交易<code>sign-transaction</code>请求成功之后返回的json结果如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"sign_complete\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">\"transaction\"</span>: {\n    <span class=\"hljs-string\">\"allow_additional_actions\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"070100020161015f1190c60818b4aff485c865113c802942f29ce09088cae1b117fc4c8db2292212ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8099c4d599010001160014a86c83ee12e6d790fb388345cc2e2b87056a0773630240273d5fc4fb06909fbc2968ea91c411fd20f690c88e74284ce2732052400129948538562fe432afd6cf17e590e8645b80edf80b9d9581d0a980d5f9f859e3880620d174db6506e35f2decb5be148c2984bfd0f6c67f043365bf642d1af387c04fd50161015fb018097c4040c8dd86d95611a13c24f90d4c9d9d06b25f5c9ed0556ac8abd73442275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f80a094a58d1d0101160014068840e56af74038571f223b1c99f1b60caaf4566302400cf0beefceaf9fbf1efadedeff7aee5b38ee7a25a20d78b630b01613bc2f8c9230555a6e09aaa11a82ba68c0fc9e98a47c852dfe3de851d93f9b2b7ce256f90d2005cdbcc705f07ad87521835bbba226ad7b430cc24e5e3f008edbe6154053541903013effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80bfffcb9901011600140b946646626c55a52a325c8bb48de792284d9b7200013e42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f9d9f94a58d1d01160014c8b4391bab4923a83b955170d24ee4ca5b6ec3fb00013942275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f6301160014366b275ed9b2266b645cf1b8be51009cc3b260e100\"</span>,\n    <span class=\"hljs-string\">\"signing_instructions\"</span>: [\n      {\n        <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-string\">\"witness_components\"</span>: [\n          {\n            <span class=\"hljs-string\">\"keys\"</span>: [\n              {\n                <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                  <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                  <span class=\"hljs-string\">\"0100000000000000\"</span>\n                ],\n                <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n              }\n            ],\n            <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"signatures\"</span>: [\n              <span class=\"hljs-string\">\"273d5fc4fb06909fbc2968ea91c411fd20f690c88e74284ce2732052400129948538562fe432afd6cf17e590e8645b80edf80b9d9581d0a980d5f9f859e38806\"</span>\n            ],\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n          },\n          {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"d174db6506e35f2decb5be148c2984bfd0f6c67f043365bf642d1af387c04fd5\"</span>\n          }\n        ]\n      },\n      {\n        <span class=\"hljs-string\">\"position\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">\"witness_components\"</span>: [\n          {\n            <span class=\"hljs-string\">\"keys\"</span>: [\n              {\n                <span class=\"hljs-string\">\"derivation_path\"</span>: [\n                  <span class=\"hljs-string\">\"010100000000000000\"</span>,\n                  <span class=\"hljs-string\">\"0800000000000000\"</span>\n                ],\n                <span class=\"hljs-string\">\"xpub\"</span>: <span class=\"hljs-string\">\"de0db655c091b2838ccb6cddb675779b0a9a4204b122e61699b339867dd10eb0dbdc926882ff6dd75c099c181c60d63eab0033a4b0a4d0a8c78079e39d7ad1d8\"</span>\n              }\n            ],\n            <span class=\"hljs-string\">\"quorum\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"signatures\"</span>: [\n              <span class=\"hljs-string\">\"0cf0beefceaf9fbf1efadedeff7aee5b38ee7a25a20d78b630b01613bc2f8c9230555a6e09aaa11a82ba68c0fc9e98a47c852dfe3de851d93f9b2b7ce256f90d\"</span>\n            ],\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"raw_tx_signature\"</span>\n          },\n          {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"data\"</span>,\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"05cdbcc705f07ad87521835bbba226ad7b430cc24e5e3f008edbe61540535419\"</span>\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n<p>对应响应对象的源代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> signResp <span class=\"hljs-keyword\">struct</span> {\n\tTx           *txbuilder.Template <span class=\"hljs-string\">`json:\"transaction\"`</span>\n\tSignComplete <span class=\"hljs-keyword\">bool</span>                <span class=\"hljs-string\">`json:\"sign_complete\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Tx</code> 签名之后的交易模板<code>txbuilder.Template</code>，如果签名成功则<code>signatures</code>会由null变成签名的值，而<code>raw_transaction</code>的长度会变长，是因为<code>bc.Tx</code>部分添加了验证签名的参数信息</li>\n<li><code>SignComplete</code> 签名是否完成标志，如果为<code>true</code>表示签名完成，否则为<code>false</code>表示签名未完成，单签的话一般可能为签名密码错误; 而多签的话一般为还需要其他签名。签名失败只需将签名的交易数据用正确的密码重新签名即可，无需再次<code>build-transaction</code>构建交易</li>\n</ul>\n<p><a name=\"fc0881cd\"></a></p>\n<h2>提交交易</h2>\n<p>API接口 submit-transaction，代码<a href=\"https://github.com/Bytom/bytom/blob/master/api/transact.go#L135\">api/transact.go#L135</a></p>\n<p>提交交易的输入请求json格式如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"raw_transaction\"</span>: <span class=\"hljs-string\">\"070100020161015f1190c60818b4aff485c865113c802942f29ce09088cae1b117fc4c8db2292212ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8099c4d599010001160014a86c83ee12e6d790fb388345cc2e2b87056a0773630240273d5fc4fb06909fbc2968ea91c411fd20f690c88e74284ce2732052400129948538562fe432afd6cf17e590e8645b80edf80b9d9581d0a980d5f9f859e3880620d174db6506e35f2decb5be148c2984bfd0f6c67f043365bf642d1af387c04fd50161015fb018097c4040c8dd86d95611a13c24f90d4c9d9d06b25f5c9ed0556ac8abd73442275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f80a094a58d1d0101160014068840e56af74038571f223b1c99f1b60caaf4566302400cf0beefceaf9fbf1efadedeff7aee5b38ee7a25a20d78b630b01613bc2f8c9230555a6e09aaa11a82ba68c0fc9e98a47c852dfe3de851d93f9b2b7ce256f90d2005cdbcc705f07ad87521835bbba226ad7b430cc24e5e3f008edbe6154053541903013effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80bfffcb9901011600140b946646626c55a52a325c8bb48de792284d9b7200013e42275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f9d9f94a58d1d01160014c8b4391bab4923a83b955170d24ee4ca5b6ec3fb00013942275aacbeda1522cd41580f875c3c452daf5174b17ba062bf0ab71a568c123f6301160014366b275ed9b2266b645cf1b8be51009cc3b260e100\"</span>\n}\n</code></pre>\n<p>对应源代码的请求对象如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> SubmitRequest <span class=\"hljs-keyword\">struct</span> {    <span class=\"hljs-comment\">//function submit request</span>\n\tTx types.Tx <span class=\"hljs-string\">`json:\"raw_transaction\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>Tx</code> 签名完成之后的交易信息。这里需要注意该字段中的<code>raw_transaction</code>不是签名交易<code>sign-transaction</code>的全部返回结果，而是签名交易返回结果中<code>transaction</code>中的<code>raw_transaction</code>字段。</li>\n</ul>\n<p><code>submit-transaction</code>请求成功之后返回的json结果如下：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-string\">\"tx_id\"</span>: <span class=\"hljs-string\">\"2c0624a7d251c29d4d1ad14297c69919214e78d995affd57e73fbf84ece361cd\"</span>\n}\n</code></pre>\n<p>对应源代码的响应对象如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> submitTxResp <span class=\"hljs-keyword\">struct</span> {\n\tTxID *bc.Hash <span class=\"hljs-string\">`json:\"tx_id\"`</span>\n}\n</code></pre>\n<p>结构字段说明如下：</p>\n<ul>\n<li><code>TxID</code> 交易ID，当交易被提交到交易池之后会显示该信息，否则表示交易失败</li>\n</ul>\n",
  "link": "/zh-cn/docs/11_2_2_account_management.html",
  "meta": {}
}