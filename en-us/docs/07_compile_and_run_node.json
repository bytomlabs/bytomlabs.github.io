{
  "filename": "07_compile_and_run_node.md",
  "__html": "<h2>Compile and Run Node</h2>\n<h3>Building Executables</h3>\n<h4>Basic compilation</h4>\n<p>Switch to the bytom repository root directory.</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/bytom\n$ make bytomd    <span class=\"hljs-comment\"># build bytomd</span>\n$ make bytomcli  <span class=\"hljs-comment\"># build bytomcli</span>\n</code></pre>\n<p>When successfully building the project, the <code>bytom</code> and <code>bytomcli</code> binary should be present in <code>cmd/bytomd</code> and <code>cmd/bytomcli</code> directory, respectively.</p>\n<h4>Some other compilation options</h4>\n<p><code>make bytomd-simd</code>:</p>\n<ol>\n<li>compile the simd version of <code>bytomd</code>.</li>\n<li>notes:\n<ol>\n<li>if you are using <em>Mac</em>, please make sure <em>llvm</em> is installed by <code>brew install llvm</code>.</li>\n<li>if you are using <em>Windows</em>, please make sure <em>mingw-w64</em> is installed and set up the <em>PATH</em> environment variable accordingly.</li>\n</ol>\n</li>\n</ol>\n<p><code>make release</code>:</p>\n<ol>\n<li>compile the <em>32-bit</em> and <em>64-bit</em> version of <code>bytomd</code>, <code>bytomcli</code> and <code>miner</code> basing on the OS.</li>\n<li>md5 the checksum and compress the files into <code>target/</code> directory. On Darwin <code>brew install md5sha1sum</code> is needed.</li>\n</ol>\n<p><code>make release-all</code>:</p>\n<ol>\n<li>compile the <em>32-bit</em> and <em>64-bit</em> version of <code>bytomd</code>, <code>bytomcli</code> and <code>miner</code> for <em>Linux</em>, <em>Windows</em> and <em>Darwin</em>.</li>\n<li>md5 the checksum and compress the files into <code>target/</code> directory. On Darwin <code>brew install md5sha1sum</code> is needed.</li>\n</ol>\n<h3>Run <code>bytomd</code></h3>\n<h4>Initialize</h4>\n<p>First of all, initialize the node:</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> ./cmd/bytomd\n$ ./bytomd init --chain_id testnet\n</code></pre>\n<p>There are two options for the flag <code>--chain_id</code>:</p>\n<ul>\n<li><code>testnet</code>: connect to the testnet.</li>\n<li><code>mainnet</code>: standalone mode.</li>\n</ul>\n<p>After that, you'll see <code>.bytomd</code> generated in current directory, then launch the node.</p>\n<h4>Launch</h4>\n<pre><code class=\"language-bash\">$ ./bytomd node --mining\n</code></pre>\n<p>available flags for <code>bytomd node</code>:</p>\n<pre><code>      --auth.disable                Disable rpc access authenticate\n      --mining                      Enable mining\n      --p2p.dial_timeout int        Set dial timeout (default 3)\n      --p2p.handshake_timeout int   Set handshake timeout (default 30)\n      --p2p.laddr string            Node listen address.\n      --p2p.max_num_peers int       Set max num peers (default 50)\n      --p2p.pex                     Enable Peer-Exchange\n      --p2p.seeds string            Comma delimited host:port seed nodes\n      --p2p.skip_upnp               Skip UPNP configuration\n      --prof_laddr string           Use http to profile bytomd programs\n      --wallet.disable              Disable wallet\n      --web.closed                  Lanch web browser or not\n      --simd.enable                 Enable the _simd_ feature to speed up the _PoW_ verification (e.g., during mining and block verification)\n</code></pre>\n<p>Given the <code>bytomd</code> node is running, the general workflow is as follows:</p>\n<ul>\n<li>create key, then you can create account and asset.</li>\n<li>send transaction, i.e., build, sign and submit transaction.</li>\n<li>query all kinds of information, let's say, avaliable key, account, key, balances, transactions, etc.</li>\n</ul>\n<h4>Testing</h4>\n<p>Testing one library:</p>\n<pre><code>go test -v ./account \n</code></pre>\n<p>Using options <code>-v</code> (logging even if no error) is recommended.</p>\n<p>Testing only some methods:</p>\n<pre><code>go test -v ./account -run TestCreateAccount\n</code></pre>\n<p><strong>Note</strong>: here all tests with prefix <em>TestMethod</em> will be run, so if you got TestMethod, TestMethod1, then both!</p>\n<p><strong>Running benchmarks</strong>, eg.:\nswitch to test directory.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/bytom/<span class=\"hljs-built_in\">test</span>\ngo <span class=\"hljs-built_in\">test</span> -v -bench=. -benchtime=3s -run=none\n</code></pre>\n<p>Using options <code>-bench</code> to specify test directory, and <code>-benchtime</code> to specify the test time.</p>\n<p>for more see <a href=\"http://golang.org/cmd/go/#hdr-Description_of_testing_flags\">go test flags</a></p>\n",
  "link": "/en-us/docs/07_compile_and_run_node.html",
  "meta": {}
}