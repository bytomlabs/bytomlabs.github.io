{
  "filename": "04_4_vapor.md",
  "__html": "<h1>Vapor</h1>\n<p><a name=\"b8b6e6e2\"></a></p>\n<h1>What is Vapor?</h1>\n<p>Vapor is software designed to extensions to the Bytom protocol, which allows partipicants to define, issue and transfer digitial assets on a multi-asset shared ledger or networks pegged to Bytom as a sidechain or run as a standalone blockchain.</p>\n<p><a name=\"b3abf203\"></a></p>\n<h2>Building from source</h2>\n<p><a name=\"Requirements\"></a></p>\n<h3>Requirements</h3>\n<ul>\n<li><a href=\"https://golang.org/doc/install\">Go</a> version 1.11.4 or higher, with <code>$GOPATH</code> set to your preferred directory</li>\n</ul>\n<p><a name=\"Installation\"></a></p>\n<h3>Installation</h3>\n<p>Ensure Go with the supported version is installed properly:</p>\n<pre><code class=\"language-bash\">$ go version\n$ go env GOROOT GOPATH\n</code></pre>\n<ul>\n<li>Get the source code</li>\n</ul>\n<pre><code class=\"language-bash\">$ git <span class=\"hljs-built_in\">clone</span> https://github.com/bytom/vapor.git <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/vapor\n</code></pre>\n<ul>\n<li>Build source code</li>\n</ul>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/vapor\n$ make vapor    <span class=\"hljs-comment\"># build vapor</span>\n$ make vaporcli  <span class=\"hljs-comment\"># build vaporcli</span>\n</code></pre>\n<p>When successfully building the project, the <code>vapor</code> and <code>vaporcli</code> binary should be present in <code>cmd/vapor</code> and <code>cmd/vaporcli</code> directory, respectively.</p>\n<p><a name=\"Executables\"></a></p>\n<h3>Executables</h3>\n<p>The Vapor project comes with several executables found in the <code>cmd</code> directory.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>vapor</strong></td>\n<td>vapor command can help to initialize and launch vapor domain by custom parameters. <code>vapor --help</code> for command line options.</td>\n</tr>\n<tr>\n<td><strong>vaporcli</strong></td>\n<td>Our main Vapor CLI client. It is the entry point into the Vapor network (main-, test- or private net), capable of running as a full node archive node (retaining all historical state). It can be used by other processes as a gateway into the Vapor network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. <code>vaporcli --help</code>.</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"1c2b8c9e\"></a></p>\n<h2>Running vapor</h2>\n<p>Currently, vapor is still in active development and a ton of work needs to be done, but we also provide the following content for these eager to do something with <code>vapor</code>. This section won't cover all the commands of <code>vapor</code> and <code>vaporcli</code> at length, for more information, please the help of every command, e.g., <code>vaporcli help</code>.</p>\n<p><a name=\"Initialize\"></a></p>\n<h3>Initialize</h3>\n<p>First of all, initialize the node:</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> ./cmd/vapor\n$ ./vapor init --chain_id mainnet\n</code></pre>\n<p>There are three options for the flag <code>--chain_id</code>:</p>\n<ul>\n<li><code>mainnet</code>: connect to the mainnet.</li>\n<li><code>testnet</code>: connect to the testnet wisdom.</li>\n<li><code>solonet</code>: standalone mode.<br />\nAfter that, you'll see <code>config.toml</code> generated, then launch the node.</li>\n</ul>\n<p><a name=\"launch\"></a></p>\n<h3>launch</h3>\n<pre><code class=\"language-bash\">$ ./vapor node\n</code></pre>\n<p>available flags for <code>vapor node</code>:</p>\n<pre><code>--auth.disable                            Disable rpc access authenticate\n      --chain_id string                         Select network type\n  -h, --help                                    help for node\n      --log_file string                         Log output file\n      --log_level string                        Select log level(debug, info, warn, error or fatal\n      --mainchain.mainchain_rpc_host string     The address which the daemon will try to connect to validate peg-ins, if enabled. (default &quot;127.0.0.1&quot;)\n      --mainchain.mainchain_rpc_port string     The port which the daemon will try to connect to validate peg-ins, if enabled. (default &quot;9888&quot;)\n      --mainchain.mainchain_token string        The rpc token that the daemon will use to connect to validate peg-ins, if enabled.\n      --mining                                  Enable mining\n      --p2p.dial_timeout int                    Set dial timeout (default 3)\n      --p2p.handshake_timeout int               Set handshake timeout (default 30)\n      --p2p.laddr string                        Node listen address. (0.0.0.0:0 means any interface, any port) (default &quot;tcp://0.0.0.0:46656&quot;)\n      --p2p.max_num_peers int                   Set max num peers (default 50)\n      --p2p.pex                                 Enable Peer-Exchange  (default true)\n      --p2p.seeds string                        Comma delimited host:port seed nodes\n      --p2p.skip_upnp                           Skip UPNP configuration\n      --prof_laddr string                       Use http to profile bytomd programs\n      --side.fedpeg_xpubs string                Change federated peg to use a different xpub.\n      --side.parent_genesis_block_hash string    (default &quot;a75483474799ea1aa6bb910a1a5025b4372bf20bef20f246a2c2dc5e12e8a053&quot;)\n      --side.pegin_confirmation_depth uint      Pegin claims must be this deep to be considered valid. (default: 6) (default 6)\n      --side.sign_block_xpubs string            Change federated peg to use a different xpub.\n      --signer string                           The signer corresponds to xpub of signblock\n      --validate_pegin                          Validate pegin claims. All functionaries must run this.\n      --vault_mode                              Run in the offline enviroment\n      --wallet.disable                          Disable wallet\n      --wallet.rescan                           Rescan wallet\n      --web.closed                              Lanch web browser or not\n</code></pre>\n<p>Given the <code>vapor</code> node is running, the general workflow is as follows:</p>\n<ul>\n<li>create key, then you can create account.</li>\n<li>send transaction, i.e., build, sign and submit transaction.</li>\n<li>query all kinds of information, let's say, avaliable key, account, key, balances, transactions, etc.</li>\n</ul>\n<p><a name=\"Dashboard\"></a></p>\n<h3>Dashboard</h3>\n<p>Access the dashboard:</p>\n<pre><code>$ open http://localhost:8888/\n</code></pre>\n<p><a name=\"Sidechain\"></a></p>\n<h3>Sidechain</h3>\n<ul>\n<li><a href=\"docs/vapor-docs/0.1/core/vapor-deployment.md\">Sidechain deployment</a></li>\n</ul>\n",
  "link": "/en-us/docs/04_4_vapor.html",
  "meta": {}
}